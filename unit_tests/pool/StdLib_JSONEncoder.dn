uses data.String

data ResponseToApplication { 
    ResourcesByCapability resources[] 
} 
 
data ResourcesByCapability { 
    char uuid[] 
    char description[] 
    String capabilities[] 
    char status[] 
    dec lat 
    dec lon 
}

data Person {
	int age
	char name[]
	Data secondLevel
}

data Test {
	int testID
	char testName[]
	Data person
	Data secondLevel
}

data Second {
	dec decimal
}

data JustChar {
	char justChar[]
}

data ArrayString {
	String myArrayString[]
}

data ConflictingName {
	bool aComponent
}

component provides UnitTest requires data.StringUtil strUtil, data.json.JSONEncoder encoder,
	data.IntUtil iu, data.json.JSONParser parser, io.Output out {
	
	bool UnitTest:runTest() {
		char jsonDocument1[] = new char[]("{", 
                    "\"resources\": [", 
                        "{ \"uuid\": \"45b7d363-86fd-4f81-8681-663140b318d4\",", 
                          	"\"description\": \"Measure the luminosity of the environment\",", 
                            "\"capabilities\": [\"temperature\", \"environment_monitoring\", \"illuminate\"],", 
                            "\"status\": \"active\",", 
                            "\"lat\": -23.559615,", 
                            "\"lon\": -46.731385", 
                      "},", 
                        "{ \"uuid\": \"89v8d363-86fd-4f81-8681-663140b314t5\",", 
                          "\"description\": \"Measure the temperature of the environment\",", 
                            "\"capabilities\": [\"temperature\", \"environment_monitoring\"],", 
                            "\"status\": \"active\",", 
                            "\"lat\": -23.559615,", 
                            "\"lon\": -46.731385", 
                      "}", 
                  "]", 
              "}")


		ResponseToApplication test = encoder.jsonToData(jsonDocument1, typeof(ResponseToApplication), null)
		if (test.resources[0].uuid != "45b7d363-86fd-4f81-8681-663140b318d4") {
			throw new Exception("Failure in test 1")
		}
		if (test.resources[0].description != "Measure the luminosity of the environment") {
			throw new Exception("Failure in test 1")
		}
		if (test.resources[0].capabilities.arrayLength != 3) {
			throw new Exception("Failure in test 1")
		}
		if (test.resources[0].capabilities[0].string != "temperature") {
			throw new Exception("Failure in test 1")
		}
		if (test.resources[0].capabilities[1].string != "environment_monitoring") {
			throw new Exception("Failure in test 1")
		}
		if (test.resources[0].capabilities[2].string != "illuminate") {
			throw new Exception("Failure in test 1")
		}
		if (test.resources[0].status != "active") {
			throw new Exception("Failure in test 1")
		}
		if (test.resources[0].lat != -23.559615) {
			throw new Exception("Failure in test 1")
		}
		if (test.resources[0].lon != -46.731385) {
			throw new Exception("Failure in test 1")
		}

		char jsonDocument2[] = new char[]("[",
                        "{ \"uuid\": \"45b7d363-86fd-4f81-8681-663140b318d4\",", 
                          "\"description\": \"Measure the luminosity of the environment\",", 
                            "\"capabilities\": [\"temperature\", \"environment_monitoring\", \"illuminate\"],", 
                            "\"status\": \"active\",", 
                            "\"lat\": -23.559615,", 
                            "\"lon\": -46.731385", 
                      "},", 
                        "{ \"uuid\": \"89v8d363-86fd-4f81-8681-663140b314t5\",", 
                          "\"description\": \"Measure the temperature of the environment\",", 
                            "\"capabilities\": [\"temperature\", \"environment_monitoring\"],", 
                            "\"status\": \"active\",", 
                            "\"lat\": -23.559615,", 
                            "\"lon\": -46.731385", 
                      "}", 
                  "]")		

		ResourcesByCapability test2[] = encoder.jsonToArray(jsonDocument2, typeof(ResourcesByCapability[]), null)
		if (test2[1].uuid != "89v8d363-86fd-4f81-8681-663140b314t5") {
			throw new Exception("Failure in test 2")
		}
		if (test2[1].description != "Measure the temperature of the environment") {
			throw new Exception("Failure in test 2")
		}
		if (test2[1].capabilities.arrayLength != 2) {
			throw new Exception("Failure in test 2")
		}
		if (test2[1].capabilities[0].string != "temperature") {
			throw new Exception("Failure in test 2")
		}
		if (test2[1].capabilities[1].string != "environment_monitoring") {
			throw new Exception("Failure in test 2")
		}
		if (test2[1].status != "active") {
			throw new Exception("Failure in test 2")
		}
		if (test2[1].lat != -23.559615) {
			throw new Exception("Failure in test 2")
		}
		if (test2[1].lon != -46.731385) {
			throw new Exception("Failure in test 2")
		}

		char jsonTest1[] = encoder.jsonFromArray(test2, null)
		String helper[] = strUtil.explode(jsonTest1, " ")
		jsonTest1 = strUtil.implode(helper, "")

		helper = strUtil.explode(jsonDocument2, " ")
		jsonDocument2 = strUtil.implode(helper, "")

		if (jsonTest1 != jsonDocument2) {
			throw new Exception("Failure in test 3")	
		}

		char jsonTest2[] = encoder.jsonFromData(test, null)

		helper = strUtil.explode(jsonTest2, " ")
		jsonTest2 = strUtil.implode(helper, "")
		helper = strUtil.explode(jsonDocument1, " ")
		jsonDocument1 = strUtil.implode(helper, "")

		if (jsonTest2 != jsonDocument1) {
			throw new Exception("Failure in test 4")
		}

		Test test3[] = new Test[1]
		test3[0] = new Test()
		test3[0].testID = 0
		test3[0].testName = "testing"
		Person person = new Person()
		person.age = 18
		person.name = "yo"
		test3[0].person = person
		Second sec = new Second()
		sec.decimal = 0.2
		person.secondLevel = sec
		test3[0].secondLevel = sec
		char jsonFormat[] = encoder.jsonFromArray(test3, null)
		
		Test anotherTest[] = encoder.jsonToArray(jsonFormat, typeof(Test[]), null)
		if (anotherTest[0].testID != test3[0].testID) {
			throw new Exception("Failure in test 5")
		}
		if (anotherTest[0].testName != test3[0].testName) {
			throw new Exception("Failure in test 6")
		}
		Person p = anotherTest[0].person
		if (p.age != person.age) {
			throw new Exception("Failure in test 7")
		}
		if (p.name != person.name) {
			throw new Exception("Failure in test 8")
		}
		Second s = p.secondLevel
		if (s.decimal != sec.decimal) {
			throw new Exception("Failure in test 9")
		}

		JustChar test4 = new JustChar()
		test4.justChar = "testing"
		char test4Json[] = encoder.jsonFromData(test4, null)
		char test4HandMadeJson[] = "{\"justChar\": \"testing\"}"
		if (test4Json != test4HandMadeJson) {
			throw new Exception("Failure in test 10")
		}
		JustChar test5 = encoder.jsonToData(test4Json, typeof(JustChar), null)
		if (test5.justChar != test4.justChar) {
			throw new Exception("Failure in test 11")
		}

		ArrayString test6 = new ArrayString()
		test6.myArrayString = new String[2]
		test6.myArrayString[0] = new String("test string 1")
		test6.myArrayString[1] = new String("test string 2")
		char test6Json[] = encoder.jsonFromData(test6, null)
		char test6HandMadeJson[] =  "{\"myArrayString\": [\"test string 1\", \"test string 2\"]}"
		if (test6Json != test6HandMadeJson) {
			throw new Exception("Failure in test 12")	
		}
		ArrayString test7 = encoder.jsonToData(test6Json, typeof(ArrayString), null)
		for (int count = 0; count < test6.myArrayString.arrayLength; count++) {
			if (test6.myArrayString[count].string != test7.myArrayString[count].string) {
				throw new Exception("Failure in test 13")
			}
		}
		ConflictingName test8 = new ConflictingName()
		test8.aComponent = true
		Map testMap[] = new Map[1]
		testMap[0] = new Map()
		testMap[0].jsonKey = "component"
		testMap[0].dataVar = "aComponent"
		char test8Json[] = encoder.jsonFromData(test8, testMap)
		char test8HandMadeJson[] = "{\"component\": true}"
		if (test8Json != test8HandMadeJson) {
			throw new Exception("Failure in test 14")
		}
		ConflictingName test9 = encoder.jsonToData(test8Json, typeof(ConflictingName), testMap)
		if (test8.aComponent != test9.aComponent) {
			throw new Exception("Failure in test 15")
		}

		char test10JSON[] = "[\"tst1\", \"tst2\"]"
		String test10[] = encoder.jsonToArray(test10JSON, typeof(String[]), null)
		for (int i = 0; i < test10.arrayLength; i++) {
			out.println("$(test10[i].string)")
		}

		char test11JSON[] = encoder.jsonFromArray(test10, null)
		out.println("$test11JSON")

		return true
	}

	void printSpaces(int spaces) {	
		for (int count = 0; count < spaces; count++) { out.print(" ") }
	}

	void printJSONElement(JSONElement e, int spaces) {
		printSpaces(spaces)
		out.println("Name: $(e.name)")
		printSpaces(spaces)
		out.println("Type: $(iu.intToString(e.type))")
		spaces++
		for (int count = 0; count < e.children.arrayLength; count++) {
			printJSONElement(e.children[count], spaces)
		}
	}

	void printTypeInfo(Type t, int spaces) {
		printSpaces(spaces)
		out.println("Class: $(iu.intToString(t.class))")
		printSpaces(spaces)
		out.println("Flags: $(iu.intToString(t.flags))")
		printSpaces(spaces)
		out.println("Size: $(iu.intToString(t.size))")
		spaces++
		printFields(t.fields, spaces)
	}

	void printFields(Field fields[], int spaces) {
		for (int count = 0; count < fields.arrayLength; count++) {
			printSpaces(spaces)
			out.println("Name: $(fields[count].name)")
			printSpaces(spaces)
			out.println("Flags: $(iu.intToString(fields[count].flags))")
			printTypeInfo(fields[count].type, spaces)
			printSpaces(spaces)
			out.println("-")	
		}
	}
}
