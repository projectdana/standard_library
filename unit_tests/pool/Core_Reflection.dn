uses data.String

data Plane {
	char make[]
	char model[]
	Data cargo
	}

data Second {
	int m
	}

data Person {
	char name[]
	int age
	dec weight
	Data content
	Object object
	Thread thread
	IDC com
	}

data Persons {
	char name[]
	Data contents[]
	Object objects[]
	}

component provides UnitTest requires io.Output out, data.json.JSONEncoder encoder, data.json.JSONParser parser {
	
	Type buildType(JSONElement doc)
		{
		Type t = new Type()
		t.class = Type.DATA
		
		for (int i = 0; i < doc.children.arrayLength; i++)
			{
			Field ntf = new Field()
			ntf.name = doc.children[i].name
			
			if (doc.children[i].type == JSONElement.TYPE_OBJECT)
				{
				ntf.type = buildType(doc.children[i])
				}
				else if (doc.children[i].type == JSONElement.TYPE_STRING)
				{
				ntf.type = new Type(Type.ARRAY, 0, 0, new Field(new Type(Type.INTEGER, Type.F_CHAR, 1)))
				}
				else if (doc.children[i].type == JSONElement.TYPE_BOOLEAN)
				{
				ntf.type = new Type(Type.INTEGER, Type.F_BOOL, 1)
				}
			
			t.fields = new Field[](t.fields, ntf)
			}
		
		return t
		}
	
	Data decodeValues(JSONElement doc, Type t)
		{
		Data result = new Data() from t
		
		for (int i = 0; i < doc.children.arrayLength; i++)
			{
			if (doc.children[i].type == JSONElement.TYPE_OBJECT)
				{
				result:.i = decodeValues(doc.children[i], t.fields[i].type)
				}
				else if (doc.children[i].type == JSONElement.TYPE_STRING)
				{
				result:.i = doc.children[i].value
				}
				else if (doc.children[i].type == JSONElement.TYPE_BOOLEAN)
				{
				bool b = false
				
				if (doc.children[i].value == "true")
					b = true
				
				result:.i = b
				}
			}
		
		return result
		}
	
	Data decodeData(char json[])
		{
		//first we need to scan the json data to establish the fields of our type
		// - then we can construct a data instance of that type
		// - then we scan the data again to the set field values
		
		JSONElement doc = parser.parseDocument(json)
		
		Type t = buildType(doc)
		
		return decodeValues(doc, t)
		}
	
	char[] getNull()
		{
		return null
		}
	
	bool UnitTest:runTest()
		{
		Type t = typeof(Person)
		
		if (t.fields[0].name != "name") throw new Exception("Failure in test 1")
		
		Person p = new Person()
		
		//if (p.["age"] == Field.NOT_FOUND) throw new Exception("Failure in test 2")
		
		//if (p.["space"] != Field.NOT_FOUND) throw new Exception("Failure in test 3")
		
		t = typeof(Person)
		
		if (t.fields[1].name != "age") throw new Exception("Failure in test 4")
		
		p:.0 = null
		
		p:.0 = getNull()
		
		Data dx = new Data() from t
		p = dx
		
		// -- construct --
		
		Plane pl = new Plane("Airbus", "A380", new String("Starbase"))
		
		char json[] = encoder.jsonFromData(pl, null)
		
		Plane x = decodeData(json)
		
		String sv = x.cargo
		
		if (sv.string != "Starbase") throw new Exception("Failure in test 5")
		
		// -- sizing --
		
		Type tsA = typeof(char[10])
		
		if (tsA.size != 10) throw new Exception("Failure in test 6")
		
		Type tsB = typeof(char[])
		
		if (tsB.size != 0) throw new Exception("Failure in test 7")
		
		return true
		}
	
	}