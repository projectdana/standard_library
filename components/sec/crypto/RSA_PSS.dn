uses data.String

interface CipherLib {
	int aes_cbc_encryptInit(int keyLength, char key[], char iv[])
	byte[] aes_cbc_encryptPart(int handle, byte content[])
	byte[] aes_cbc_encryptFinish(int handle)
	bool aes_cbc_encryptOK(int handle)
	
	int aes_cbc_decryptInit(int keyLength, char key[], char iv[])
	byte[] aes_cbc_decryptPart(int handle, byte content[])
	byte[] aes_cbc_decryptFinish(int handle)
	bool aes_cbc_decryptOK(int handle)
	
	int aes_gcm_encryptInit(int keyLength, char key[], char iv[])
	bool aes_gcm_encryptAAD(int handle, byte content[])
	byte[] aes_gcm_encryptPart(int handle, byte content[])
	byte[] aes_gcm_encryptFinish(int handle)
	bool aes_gcm_encryptOK(int handle)
	byte[] aes_gcm_encryptGetTag(int handle)
	
	int aes_gcm_decryptInit(int keyLength, char key[], char iv[])
	bool aes_gcm_decryptAAD(int handle, byte content[])
	byte[] aes_gcm_decryptPart(int handle, byte content[])
	byte[] aes_gcm_decryptFinish(int handle)
	void aes_gcm_decryptSetTag(int handle, byte tag[])
	bool aes_gcm_decryptOK(int handle)
	
	void instance_cleanup(int handle)
	
	int rsa_oaep_init(char key_pem[], byte mode)
	byte[] rsa_oaep_encrypt(int handle, byte content[])
	byte[] rsa_oaep_decrypt(int handle, byte content[])
	void rsa_oaep_cleanup(int handle)
	
	int rsa_pss_init(char key_pem[], byte mode)
	byte[] rsa_pss_sign(int handle, byte content[])
	bool rsa_pss_verify(int handle, byte plain[], byte signed[])
	void rsa_pss_cleanup(int handle)
	
	bool rsa_generate_key(int keyBits, String public, String private)
	bool rsa_convert_key(char public[], char private[], byte type, String newPublic, String newPrivate, byte newType)
	}

component provides RSA_PSS(Destructor) requires native CipherLib lib {
	
	int platformHandle
	int myMode
	
	RSA_PSS:RSA_PSS(char key_pem[], byte mode)
		{
		platformHandle = lib.rsa_pss_init(key_pem, mode)
		
		if (platformHandle == 0) throw new Exception("failed to create RSA-PSS instance based on given key")
		
		myMode = mode
		}
	
	//use public key to verify that something was signed with the corresponding private key
	bool RSA_PSS:verify(byte plaintext[], byte signedtext[])
		{
		return lib.rsa_pss_verify(platformHandle, plaintext, signedtext)
		}
	
	//use private key to sign something
	byte[] RSA_PSS:sign(byte plaintext[])
		{
		return lib.rsa_pss_sign(platformHandle, plaintext)
		}
	
	void Destructor:destroy()
		{
		if (platformHandle != 0)
			lib.rsa_pss_cleanup(platformHandle)
		}
	
	}