interface UDPLib{
	bool send(char address[], int port, byte content[])
	bool recv(int hnd, Datagram d)
	int bind(char address[], int port)
	void setBlocking(int hnd, bool blocking)
	void unbind(int hnd)

	int createSelect(int eventArrayLength)
	bool setEventArrayLength(int selectHandle, int l)
	bool addSocket(int selectHandle, int socketHandle, Data se)
	void remSocket(int selectHandle, int socketHandle)
	int wait(int selectHandle, Data events[])
	int waitTime(int selectHandle, Data events[], int waitTime)
	void destroySelect(int selectHandle)
	}

data MonitorData {
	int socketHandle
	MonitorEvent mevent
}

data MonitorList {
	UDPServer socket
	MonitorData mdata
	MonitorList next
}

const int MONITOR_EVENT_ARRAY_LENGTH = 16

component provides net.UDPServer, net.UDPClient, net.UDPMonitor(Destructor) requires native UDPLib lib
	{
	implementation UDPClient{
		
		bool UDPClient:send(char address[], int port, byte content[])
			{
			return lib.send(address, port, content)
			}
		}
	
	implementation UDPServer{
		
		int platformSocket
		bool nonBlocking
		
		Datagram UDPServer:recv()
			{
			Datagram d = new Datagram()
			
			lib.recv(platformSocket, d)
			
			return d
			}
		
		bool UDPServer:bind(char address[], int port)
			{
			int platformHandle = lib.bind(address, port)
			
			if (platformHandle == 0)
				return false
			
			platformSocket = platformHandle
			
			return true
			}
		
		bool UDPServer:setNonBlocking()
			{
			nonBlocking = true

			lib.setBlocking(platformSocket, false)

			return true
			}
		
		void UDPServer:unbind()
			{
			lib.unbind(platformSocket)
			}
		}
	
	implementation UDPMonitor {

		int handle

		MonitorEvent events[] = new MonitorEvent[MONITOR_EVENT_ARRAY_LENGTH]

		MonitorList socketList
		
		UDPMonitor:UDPMonitor()
			{
			handle = lib.createSelect(MONITOR_EVENT_ARRAY_LENGTH)
			if (handle == 0) throw new Exception("failed to create UDP selector")
			}
		
		bool UDPMonitor:addSocket(store UDPServer s, opt store Data userData)
			{
			MonitorData mdata = new MonitorData(s.platformSocket, new MonitorEvent(s, userData))
			MonitorList nli = new MonitorList(s, mdata)

			if (!lib.addSocket(handle, s.platformSocket, mdata))
				throw new Exception("could not add socket to selector")
			
			nli.next = socketList
			socketList = nli
			
			return true
			}

		/* {"@description" : "Remove a socket from this monitor instance."} */
		void UDPMonitor:remSocket(UDPServer s)
			{
			MonitorList prev = null
			MonitorList w = socketList

			while (w != null && w.socket !== s)
				{
				prev = w
				w = w.next
				}
			
			if (w != null)
				{
				if (prev == null)
					socketList = w.next
					else
					prev.next = w.next
				}
			
			w = null

			lib.remSocket(handle, s.platformSocket)
			}
	
		MonitorEvent[] UDPMonitor:wait(opt int ms)
			{
			int r = 0

			if (isset ms)
				r = lib.waitTime(handle, events, ms)
				else
				r = lib.wait(handle, events)
			
			if (r != 0)
				{
				return dana.sub(events, 0, r-1)
				}
				
			return null
			}
		
		void Destructor:destroy()
			{
			lib.destroySelect(handle)
			}
		}
	}