uses data.String

interface TCPLib{
	int connect(char address[], int port)
	void disconnect(int hnd)
	int send(int hnd, byte content[])
	byte[] recv(int hnd, int length)
	int accept(int hnd)
	int bind(char address[], int port)
	void unbind(int hnd)
	void getLocalAddress(int hnd, NetworkEndpoint ha)
	void getRemoteAddress(int hnd, NetworkEndpoint ha)
	}

interface SSLLib{
	
	//certificate stores
	int createCertStore()
	bool addCertificate(int hnd, char cert[])
	bool loadLocation(int hnd, char cert[])
	void freeCertStore(int hnd)
	
	//contexts
	int createContext(bool serverMode) //true for server, false for client
	bool setCertificate(int hnd, byte cert[], byte key[])
	bool setCertificateChain(int hnd, String chain[])
	bool setCipherSet(int hnd, int set)
	void freeContext(int hnd)
	
	//SSL
	
	int makeSSL(int cxt)
	
	bool accept(int hnd, int soc_fd)
	bool connect(int hnd, int soc_fd)
	
	char[] getPeerCertificate(int hnd)
	String[] getPeerCertChain(int hnd)
	
	int verifyCertificate(int hnd, int st_hnd, VerifyStatus vfs, char cert[], String chain[])
	
	int write(int hnd, byte dat[])
	byte[] read(int hnd, int len)
	
	void closeSSL(int hnd)
	void freeSSL(int hnd)
	}

component provides net.TCPServerSocket, net.TCPSocket(Destructor), net.TLSCertStore(Destructor), net.TLSContext(Destructor), net.TLS(Destructor) requires native TCPLib lib, native SSLLib slib, io.Output out {
	
	implementation TCPSocket {
		bool connected
		int platformSocket
		Mutex accessLock = new Mutex()
		Mutex connectLock = new Mutex()
		
		int TCPSocket:send(byte content[])
			{
			mutex(accessLock)
				{
				if (connected)
					return lib.send(platformSocket, content)
					else
					throw new Exception("Socket is not connected for data send")
				}
			}
		
		byte[] TCPSocket:recv(int length)
			{
			mutex(accessLock)
				{
				if (connected)
					return lib.recv(platformSocket, length)
					else
					throw new Exception("Socket is not connected for data receive")
				}
			}
		
		bool TCPSocket:accept(TCPServerSocket server)
			{
			mutex(connectLock)
				{
				if (connected)
					{
					lib.disconnect(platformSocket)
					connected = false
					}
				
				if (server.connected)
					{
					int clientHandle = lib.accept(server.platformSocket)
					
					if (clientHandle == 0)
						return false
					
					platformSocket = clientHandle
					connected = true
					
					return true
					}
					else
					{
					throw new Exception("Server socket is not bound for accept")
					}
				}
			}
		
		bool TCPSocket:connect(char address[], int port)
			{
			mutex(connectLock)
				{
				if (connected)
					{
					lib.disconnect(platformSocket)
					connected = false
					}
				
				int platformHandle = lib.connect(address, port)
				
				if (platformHandle == 0)
					return false
				
				platformSocket = platformHandle
				connected = true
				
				return true
				}
			}
		
		void TCPSocket:disconnect()
			{
			mutex(connectLock)
				{
				if (connected)
					{
					lib.disconnect(platformSocket)
					connected = false
					platformSocket = 0
					}
				}
			}
		
		NetworkEndpoint TCPSocket:getLocalEndpoint()
			{
			NetworkEndpoint ha = new NetworkEndpoint()
			
			mutex(connectLock)
				{
				if (connected)
					{
					lib.getLocalAddress(platformSocket, ha)
					}
					else
					{
					throw new Exception("Socket is not connected")
					}
				}
			
			return ha
			}
		
		NetworkEndpoint TCPSocket:getRemoteEndpoint()
			{
			NetworkEndpoint ha = new NetworkEndpoint()
			
			mutex(connectLock)
				{
				if (connected)
					{
					lib.getRemoteAddress(platformSocket, ha)
					}
					else
					{
					throw new Exception("Socket is not connected")
					}
				}
			
			return ha
			}
		
		void Destructor:destroy()
			{
			if (connected)
				{
				lib.disconnect(platformSocket)
				connected = false
				platformSocket = 0
				}
			}
		
		}
	
	implementation TCPServerSocket {
		bool connected
		int platformSocket
		Mutex accessLock = new Mutex()
		
		bool TCPServerSocket:bind(char address[], int port)
			{
			mutex(accessLock)
				{
				int platformHandle = lib.bind(address, port)
				
				if (platformHandle == 0)
					throw new Exception("Could not bind to address '$address'")
				
				platformSocket = platformHandle
				connected = true
				
				return true
				}
			}
		
		void TCPServerSocket:unbind()
			{
			mutex(accessLock)
				{
				if (connected)
					{
					lib.unbind(platformSocket)
					connected = false
					}
				}
			}
		}
	
	implementation TLSCertStore {
		int handle
		
		TLSCertStore:TLSCertStore()
			{
			handle = slib.createCertStore()
			}
		
		//add a trusted certificate (PEM-encoded x509)
		bool TLSCertStore:addCertificate(char cert[])
			{
			return slib.addCertificate(handle, cert)
			}
		
		//load all certificates from the given system path
		bool TLSCertStore:loadLocation(char path[])
			{
			return slib.loadLocation(handle, path)
			}
		
		void Destructor:destroy()
			{
			slib.freeCertStore(handle)
			}
		
		}
	
	implementation TLSContext {
		
		int platformHandle
		
		TLSContext:TLSContext(byte mode)
			{
			if (mode == TLSContext.CLIENT)
				platformHandle = slib.createContext(false)
				else
				platformHandle = slib.createContext(true)
			}
		
		bool TLSContext:setCertificate(char cert[], byte key[])
			{
			return slib.setCertificate(platformHandle, cert, key)
			}
		
		bool TLSContext:setCertificateChain(String chain[])
			{
			return slib.setCertificateChain(platformHandle, chain)
			}
		
		void TLSContext:setCipherSet(int set)
			{
			slib.setCipherSet(platformHandle, set)
			}
		
		void Destructor:destroy()
			{
			slib.freeContext(platformHandle)
			}
		
		}
	
	implementation TLS {
		
		int platformHandle
		bool closed
		Mutex connectLock = new Mutex()
		TLSContext context
		//TCPSocket socket
		
		TLS:TLS(TLSContext cxt)
			{
			context = cxt
			platformHandle = slib.makeSSL(cxt.platformHandle)
			}
		
		bool TLS:accept(TCPSocket s)
			{
			//socket = s
			return slib.accept(platformHandle, s.platformSocket)
			}
		
		bool TLS:connect(TCPSocket s)
			{
			//socket = s
			return slib.connect(platformHandle, s.platformSocket)
			}
		
		VerifyStatus TLS:verifyCertificate(TLSCertStore st, char cert[], String chain[])
			{
			VerifyStatus vf = new VerifyStatus()
			slib.verifyCertificate(platformHandle, st.handle, vf, cert, chain)
			return vf
			}
		
		char[] TLS:getPeerCertificate()
			{
			return slib.getPeerCertificate(platformHandle)
			}
		
		String[] TLS:getPeerCertChain()
			{
			return slib.getPeerCertChain(platformHandle)
			}
		
		int TLS:send(byte dat[])
			{
			return slib.write(platformHandle, dat)
			}
		
		byte[] TLS:recv(int len)
			{
			return slib.read(platformHandle, len)
			}
		
		void TLS:close()
			{
			if (platformHandle != 0 && !closed)
				{
				slib.closeSSL(platformHandle)
				closed = true
				}
			}
		
		void Destructor:destroy()
			{
			if (platformHandle != 0 && !closed)
				{
				slib.closeSSL(platformHandle)
				}
			
			if (platformHandle != 0)
				slib.freeSSL(platformHandle)
			}
		
		}
	
	}
