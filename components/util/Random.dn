/*
* Simple random number generator, Park-Miller Minimal Standard
* (entirely predictable series of numbers, but sequentially returned numbers are unrelated)
*/

data RDFDec {
	dec d
	}

component provides Random {
	
	int seed = 1
	
	char defaultCharset[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
	
	void Random:setSeed(int s)
		{
		if (s == 0) s = 1 //a seed of 0 will generate 0's continuously in this implementation
		seed = s
		}
	
	int Random:getInt(int top)
		{
		int hi
		int lo
		
		lo = 16807 * (seed * 0xFFFF)
		hi = 16807 * (seed >> 16)
		
		lo += (hi & 0x7FFF) << 16
		lo += hi >> 15
		
		if (lo > 0x7FFFFFFF)
			lo -= 0x7FFFFFFF
		
		seed = lo
		
		return seed % top
		}
	
	char[] Random:getString(int len)
		{
		return getStringOf(len, defaultCharset)
		}
	
	char[] Random:getStringOf(int len, char charset[])
		{
		if (charset.arrayLength == 0) throw new Exception("cannot generate string from empty charset")
		
		char result[] = new char[len]
		
		for (int i = 0; i < len; i++)
			{
			result[i] = charset[getInt(charset.arrayLength)]
			}
		
		return result
		}
	
	dec Random:getDec(dec low, dec high)
		{
		if (low >= high) throw new Exception("parameter 1 must be less than parameter 2")
		
		//get the difference between the two numbers
		dec diff = high - low
		
		//get the raw bytes of the number
		RDFDec rdfA = new RDFDec(diff)
		byte serialA[] = dana.serial(rdfA)
		
		bool bigOK = false
		
		//scan left-to-right, and for each byte get a random number up to the current value of that byte
		// - if the result is *less than* the current value, subsequent bytes can pick a random number up to 255
		for (int i = 0; i < serialA.arrayLength; i++)
			{
			if (!bigOK)
				{
				byte nv = getInt(serialA[i]+1)
				if (nv < serialA[i]) bigOK = true
				serialA[i] = nv
				}
				else
				{
				byte nv = getInt(256)
				serialA[i] = nv
				}
			}
		
		//add the randomised value back to "low"
		return low + rdfA.d
		}
	
	}