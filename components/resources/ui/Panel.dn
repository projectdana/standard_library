uses GraphicsObject
uses Color
uses media.WH

data GraphicsObjectItem{
	GraphicsObject object
	}

/*
 {"description" : "Panel objects host other graphical objects. A Panel is itself a GraphicsObject, so panels can be nested."}
*/

interface Panel extends KeyEventObject {
	
	transfer int width
	transfer int height

	transfer bool repaintOn
	
	/* {"@description" : "Instantiate a new panel."} */
	Panel()
	
	/* {"@description" : "Set the background of the panel."} */
	void setBackground(store Color c)
	/* {"@description" : "Get the current background of the panel."} */
	Color getBackground()
	
	/* {"@description" : "Add a graphical object to the panel."} */
	void addObject(store GraphicsObject go)
	/* {"@description" : "Remove a graphical object from the panel."} */
	void remObject(GraphicsObject go)
	/* {"@description" : "Remove all graphical objects from the panel."} */
	void clearObjects()
	/* {"@description" : "Get the list of graphical objects on the panel."} */
	GraphicsObjectItem[] getObjects()
	
	/* {"@description" : "Set the size of this panel. Any graphical objects which are outside of this size will be clipped."} */
	void setSize(int w, int h)
	/* {"@description" : "Get the size of this panel."} */
	WH getSize()

	/* {"@description" : "Set global repaint on or off for this panel. When set to off, the panel will not act on repaint events that come from its hosted graphics objects. This can be useful when an application is updating a lot of graphics objects in a panel and wants to e.g. re-draw only once at the end. When repaint is set back to 'on' a full repaint is triggered for everything in the panel."} */
	void setRepaint(bool b)
	}