uses net.Stream
uses net.http.Header

/* {"description" : "Interface to write HTTP response data to a client request, including setting session cookie state."} */

interface DocStream {
	
	/* {"@description" : "Construct a new doc stream. This is done automatically by a web framework."} */
	DocStream(store Stream s, store Header headers[])
	
	/* {"@description" : "Get the list of request headers sent by the client."} */
	Header[] getRequestHeaders()
	
	/* {"@description" : "Push a context onto the stack, collect content without sending anything."} */
	void pushContext()
	
	/* {"@description" : "Pop headers to next context on the stack."} */
	void popContext()
	
	/* {"@description" : "Set a piece of session state, identified by a given key, to equal a given value. This causes a cookie to be set, so that this session state is available on subsequent web requests. This function must be called before any use of write() or writeStatus()."} */
	void setSessionKey(char key[], char value[])
	
	/*
	 {"@description" : "Get a piece of session state, identified by a given key, as previously set by setSessionKey.",
		"@return" : "The value of the session state key, as previously set by setSessionKey, or null if no such key exists."}
	*/
	char[] getSessionKey(char key[])
	
	/*
	 {"@description" : "Delete a piece of session state, identified by a given key. The deleted session state will no longer be available to subsequent web requests. This function must be called before any use of write() or writeStatus()."}
	*/
	void remSessionKey(char key[])
	
	/*
	 {"@description" : "Send data to the connected client. By default, content is assumed to be text (HTML) and uses chunked encoding; other content types should be indicated by first using writeStatus()."}
	*/
	void setStatusCode(int code, char reason[], bool directStream)
	
	/*
	 {"@description" : "Send data to the connected client. By default, content is assumed to be text (HTML) and uses chunked encoding; other content types should be indicated by first using writeStatus()."}
	*/
	void setHeaders(store Header headers[])
	
	/*
	 {"@description" : "Send data to the connected client. By default, content is assumed to be text (HTML) and uses chunked encoding; other content types should be indicated by first using writeStatus()."}
	*/
	void write(char str[])
	
	/*
	 {"@description" : "Indicate that sending of response data is complete. This function is automatically called by the web framework and so does not need to be used by the web app. After this function has been called, no further data can be sent in response to this request."}
	*/
	void sendResponse()
	
	/* {"@description" : "Framework function to check if anything was sent by this stream."} */
	bool responseSent()
	}
