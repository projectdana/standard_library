component provides Search requires io.Output out {
	
	Data[] Search:find(Data list[], TypeField field, Data template)
		{
		Data result[]
		
		for (int i = 0; i < list.arrayLength; i++)
			{
			if (list[i]:.field == template:.field)
				{
				result = new Data[](result, list[i]) from typeof(template)
				}
			}
		
		return result
		}
	
	Data Search:findFirst(Data list[], TypeField field, Data template)
		{
		for (int i = 0; i < list.arrayLength; i++)
			{
			if (list[i]:.field == template:.field)
				{
				return list[i]
				}
			}
		
		return null
		}
	
	int[] Search:findIndex(Data list[], TypeField field, Data template)
		{
		int result[]
		
		for (int i = 0; i < list.arrayLength; i++)
			{
			if (list[i]:.field == template:.field)
				{
				result = new int[](result, i)
				}
			}
		
		return result
		}
	
	int Search:findFirstIndex(Data list[], TypeField field, Data template)
		{
		for (int i = 0; i < list.arrayLength; i++)
			{
			if (list[i]:.field == template:.field)
				{
				return i
				}
			}
		
		return INT_MAX
		}
	
	Data[] Search:findDuplicates(Data list[], TypeField field)
		{
		Data result[]
		
		for (int i = 0; i < list.arrayLength; i++)
			{
			if (findFirst(result, field, list[i]) == null)
				{
				for (int j = i+1; j < list.arrayLength; j++)
					{
					if (list[i]:.field == list[j]:.field)
						{
						result = new Data[](result, list[i]) from typeof(list)
						
						break
						}
					}
				}
			}
		
		return result
		}
	
	Group findGroup(Group lst[], TypeField field, Data template)
		{
		for (int i = 0; i < lst.arrayLength; i++)
			{
			if (lst[i].cells[0]:.field == template:.field)
				return lst[i]
			}
		
		return null
		}
	
	Group[] Search:groupBy(Data list[], TypeField field)
		{
		Group result[]
		
		for (int i = 0; i < list.arrayLength; i++)
			{
			Group g = null
			if ((g = findGroup(result, field, list[i])) == null)
				{
				g = new Group(new Data[](list[i]) from typeof(list))
				
				result = new Group[](result, g)
				}
				else
				{
				g.cells = new Data[](g.cells, list[i]) from typeof(list)
				}
			}
		
		return result
		}
	
	}
