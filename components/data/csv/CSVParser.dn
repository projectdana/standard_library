const int BUF_EX_SIZE = 2048

uses data.String

component provides CSVParser requires io.Output out, data.StringUtil stringUtil, data.IntUtil intUtil, data.DecUtil decUtil, data.adt.List {
	
	bool isAnyOf(char c, char tokens[])
		{
		for (int i = 0; i < tokens.arrayLength; i ++)
			{
			if (c == tokens[i])
				return true
			}
		
		return false
		}
	
	bool isStringCharacter(char c)
		{
		return c == "\""
		}
	
	String[] explodeKE(char str[], char tokens[])
		{
		List lst = new List()
		String res[]
		String th
		
		bool inString
		for (int i = 0; i < str.arrayLength; i++)
			{
			if (!inString && isAnyOf(str[i], tokens))
				{
				if (th == null)	th = new String()
				lst.add(th)
				th = null
				}
				else
				{
				if (th == null)	th = new String()
				th.string = new char[](th.string, str[i])
				}
			
			if (isStringCharacter(str[i]))
				{
				inString = !inString
				}
			}
		
		lst.add(th)
		
		if (lst.getLength() != 0)
			{
			int i = 0
			res = new String[lst.getLength()]
			for (String s = lst.getFirst(); s != null; s = lst.getNext())
				{
				res[i] = new String(stringUtil.trim(s.string))
				i ++
				}
			}
		
		return res
		}
	
	bool isStringArrayType(Type t)
		{
		return t.class == Type.ARRAY && t.fields[0].type.class == Type.INTEGER && t.fields[0].type.flags == Type.F_CHAR
		}
	
	char[] readLine(File fd)
		{
		int bufferSize = BUF_EX_SIZE
		char buf[] = new char[BUF_EX_SIZE]
		int ndx = 0
		
		bool inString = false
		char c[]
		
		while (!fd.eof())
			{
			c = fd.read(1)
			
			if (isStringCharacter(c[0])) inString = !inString
			
			if (!inString && c == "\r")
				{
				if ((c = fd.read(1)).arrayLength == 1 && c != "\n")
					fd.setPos(fd.getPos()-1)
				
				char result[] = new char[ndx]
				result =[] buf
				return result
				}
				else if (!inString && c == "\n")
				{
				char result[] = new char[ndx]
				result =[] buf
				return result
				}
				else if (c.arrayLength == 1)
				{
				buf[ndx] = c[0]
				ndx ++
				
				if (ndx == bufferSize)
					{
					buf = new char[](buf, new char[BUF_EX_SIZE])
					bufferSize += BUF_EX_SIZE
					}
				}
			}
		
		char result[]
		if (ndx > 0)
			{
			result = new char[ndx]
			result =[] buf
			}
		return result
		}
	
	Data[] CSVParser:parseDocument(File fd, bool hasHeaderLine, char separators[], Data template)
		{
		Data result[]
		
		Type type = typeof(template)
		
		List lst = new List()
		
		if (hasHeaderLine)
			readLine(fd)
		
		while (!fd.eof())
			{
			char ln[] = readLine(fd)
			
			String s[] = explodeKE(ln, separators)
			
			Data nd = clone template
			
			for (int i = 0; i < type.fields.arrayLength; i++)
				{
				if (i < s.arrayLength && s[i] != null)
					{
					if (type.fields[i].type.class == Type.INTEGER)
						{
						nd:.i = intUtil.intFromString(s[i].string)
						}
						else if (type.fields[i].type.class == Type.DECIMAL)
						{
						nd:.i = decUtil.decFromString(s[i].string)
						}
						else if (isStringArrayType(type.fields[i].type))
						{
						char str[] = s[i].string
						
						if (str.arrayLength >= 2 && str[0] == "\"" && str[str.arrayLength-1] == "\"")
							str = stringUtil.subString(str, 1, str.arrayLength - 2)
						
						nd:.i = str
						}
					}
				}
			
			lst.add(nd)
			}
		
		if (lst.getLength() != 0)
			{
			int i = 0
			result = new Data[lst.getLength()] from type
			for (Data s = lst.getFirst(); s != null; s = lst.getNext())
				{
				result[i] = s
				i ++
				}
			}
		
		return result
		}
	
	bool CSVParser:writeDocument(File fd, bool hasHeaderLine, char separators[], Data rows[])
		{
		Type arrayType = typeof(rows)
		Type type = arrayType.fields[0].type
		
		if (hasHeaderLine)
			{
			for (int j = 0; j < type.fields.arrayLength; j++)
				{
				char val[] = type.fields[j].name
				
				fd.write(val)
				
				if (j+1 < type.fields.arrayLength) fd.write(",")
				}
			
			fd.write("\n")
			}
		
		for (int i = 0; i < rows.arrayLength; i++)
			{
			Data nd = rows[i]
			
			for (int j = 0; j < type.fields.arrayLength; j++)
				{
				char val[] = null
				
				if (type.fields[j].type.class == Type.INTEGER)
					{
					val = intUtil.intToString(nd:.j)
					}
					else if (type.fields[j].type.class == Type.DECIMAL)
					{
					dec k = nd:.j
					val = decUtil.decToString(k)
					}
					else if (isStringArrayType(type.fields[j].type))
					{
					val = nd:.j
					}
				
				fd.write(val)
				
				if (j+1 < type.fields.arrayLength) fd.write(",")
				}
			
			fd.write("\n")
			}
		
		return true
		}
	
	}