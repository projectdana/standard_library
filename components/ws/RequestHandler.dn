//simple request handler using a thread pool with blocking sockets

const char MSG_404[] = "HTTP 404: Content not found on this server"

const int MAX_CHUNK = 10240

const int THREAD_POOL_SIZE = 32

const int TIMEOUT_INTERVAL = 10
const int MAX_INACTIVE = 2000

data Command {
	const int GET = 1
	const int POST = 2
	const int PUT = 3
	const int DELETE = 4
	const int HEAD = 5
	int type
	
	const int HTTP_1_0 = 1
	const int HTTP_1_1 = 2
	int version
	
	char hostname[]
	
	char resource[]
	char ext[]
	
	bool persistent
	
	Header headers[]
}

data WorkItem {
	TCPSocket client
	TLS tlsClient
	Stream stream
	String landingPages[]
	ConfigData cfg
	int idleTime
	bool waiting
	bool killed
	int threadID
	WorkItem next
	WorkItem prev
}

data WorkerThread {
	Thread thread
	int threadID
	
	WorkItem work
	WorkItem lastWork
	int workCount
}

component provides RequestHandler(Destructor) requires io.Output out, io.FileSystem fileSystem, io.File, ws.DocStream, data.StringUtil stringUtil,
 data.IntUtil intUtil, ws.Web rh, time.Timer timer, net.http.Util util, time.Calendar cal {
	
	char web_root[] = "./"
	
	WorkerThread threadPool[] = new WorkerThread[THREAD_POOL_SIZE]
	
	Mutex workerLock = new Mutex()
	
	Mutex curWorkLock = new Mutex()
	WorkItem curWork
	
	char END_SEQ[] = "\r\n\r\n"
	char END_R[] = "\r"
	char END_N[] = "\n"
	
	bool shutdown
	
	void copyBytes(byte dest[], byte src[], int offset, int len)
		{
		for (int i = 0; i < len; i++)
			{
			dest[i] = src[offset+i]
			}
		}
	
	Command parseCommand(char buf[], int top)
		{
		//we use a custom parser here, to detect "\r\n", ":", and spaces
		// - also detect keep-alive right here, and tag it as a boolean on the Command instance
		// - we also perform lowercase operations manually as we go
		// - and we extract the file extension for mime type conversion later
		
		Command cmd = new Command()
		Header headers[]
		
		int i = 0
		
		byte mode = 0
		int start = 0
		int dot = 0
		
		//first we parse the verb / resource line
		for (i = 0; i < top; i++)
			{
			if (mode == 0)
				{
				if (buf[i] == " ")
					{
					//this is the end of the HTTP verb
					char verb[] = new char[i-start]
					copyBytes(verb, buf, start, i-start)
					
					//out.println("verb '$verb'")
					
					if (verb == "get") cmd.type = Command.GET
					else if (verb == "post") cmd.type = Command.POST
					
					mode = 1
					
					start = i + 1
					}
					else if (buf[i] >= "A" && buf[i] <= "Z")
					{
					//lowercase this
					buf[i] += 32
					}
				}
				else if (mode == 1)
				{
				if (buf[i] == " ")
					{
					//this is the end of the HTTP resource
					char resource[] = new char[i-start]
					copyBytes(resource, buf, start, i-start)
					
					//capture the file extension, if any
					if (dot != 0)
						{
						char ext[] = new char[i-(dot+1)]
						copyBytes(ext, buf, dot+1, i-(dot+1))
						
						cmd.ext = ext
						}
					
					//out.println("rsrc '$resource'")
					
					cmd.resource = resource
					
					mode = 2
					
					start = i + 1
					}
					else if (buf[i] == ".")
					{
					dot = i
					}
				}
				else if (mode == 2)
				{
				if (buf[i] == "\r")
					{
					mode = 3
					}
					else if (buf[i] >= "A" && buf[i] <= "Z")
					{
					//lowercase this
					buf[i] += 32
					}
				}
				else if (mode == 3)
				{
				if (buf[i] == "\n")
					{
					//this is the end of the HTTP version
					char version[] = new char[i-start-1]
					copyBytes(version, buf, start, i-start-1)
					
					//out.println("vers '$version'")
					
					if (version == "http/1.0") { cmd.version = Command.HTTP_1_0 }
					else if (version == "http/1.1") { cmd.version = Command.HTTP_1_1 }
					
					mode = 3
					
					start = i + 1
					
					break
					}
					else
					{
					throw new Exception("malformed HTTP request, expected newline in verb")
					}
				}
			}
		
		if (cmd.resource == null)
			throw new Exception("malformed HTTP request, missing resource in verb")
		
		if (cmd.version == 0)
			throw new Exception("malformed HTTP request, missing version in verb")
		
		//next we have headers
		char hkey[]
		char hval[]
		mode = 0
		for (; i < top; i++)
			{
			if (mode == 0)
				{
				if (buf[i] == ":")
					{
					int end = i
					
					while (buf[end] == " ") end --
					
					if (end <= start) throw new Exception("malformed HTTP request, missing key in header line")
					
					hkey = new char[end-start]
					copyBytes(hkey, buf, start, end-start)
					
					mode = 1
					
					start = i + 1
					}
					else if (buf[i] >= "A" && buf[i] <= "Z")
					{
					//lowercase this
					buf[i] += 32
					}
				}
				else if (mode == 1)
				{
				if (buf[i] == "\r")
					{
					mode = 2
					}
				}
				else if (mode == 2)
				{
				if (buf[i] == "\n")
					{
					while (buf[start] == " ") start ++
					
					if (i <= start-1) throw new Exception("malformed HTTP request, missing value in header line")
					
					hval = new char[i-start-1]
					copyBytes(hval, buf, start, i-start-1)
					
					headers = new Header[](headers, new Header(hkey, hval))
					
					//out.println("hdr '$hkey' '$hval'")
					
					//special header checks
					if (hkey == "host") cmd.hostname = hval
					if (hkey == "connection") cmd.persistent = hval.ifind("keep-alive") != StringUtil.NOT_FOUND
					
					mode = 0
					
					start = i + 1
					}
					else
					{
					throw new Exception("malformed HTTP request, expected newline in header")
					}
				}
			}
		
		cmd.headers = headers
		
		return cmd
		}
	
	Command readCommand(WorkItem w, Stream socket) {
		w.waiting = true
		w.idleTime = 0
		
		char buf[] = new char[2048]
		int offset = 0
		byte l4A
		byte l4B
		byte l4C
		byte l4D
		while (true)
			{
			char b[] = socket.recv(1)
			if (b.arrayLength == 0) break
			
			w.idleTime = 0
			
			if (offset < buf.arrayLength)
				buf[offset] = b[0]
				else
				buf = new char[](buf, b)
			
			offset ++
			
			l4A = l4B
			l4B = l4C
			l4C = l4D
			l4D = b[0]
			
			if (l4A == END_R && l4B == END_N && l4C == END_R && l4D == END_N)
				break
			}
		
		mutex(w)
			{
			w.waiting = false
			}
		
		if (w.killed)
			{
			return null
			}
		
		if (offset == 0)
			{
			return null
			}
		
		return parseCommand(buf, offset)
	}
	
	char[] getHeaderValue(Command cmd, char key[])
		{
		key = stringUtil.lowercase(key)
		for (int i = 0; i < cmd.headers.arrayLength; i++)
			{
			if (cmd.headers[i].key == key)
				return cmd.headers[i].value
			}
		return null
		}
	
	bool serveFunction_GET(DocStream ds, char path[], char command[]) {
		return rh.get(command, ds)
	}
	
	bool serveFunction_POST(DocStream ds, char path[], char command[], char ctype[], byte payload[]) {
		return rh.post(command, ctype, payload, ds)
	}
	
	char[] getMIMEType(char ext[], KeyVal mimeTypes[])
		{
		if (ext == null)
			return "application/octet-stream"
		
		for (int i = 0; i < mimeTypes.arrayLength; i ++)
			{
			if (mimeTypes[i].key == ext)
				{
				return mimeTypes[i].val
				}
			}
		
		return "application/octet-stream"
		}
	
	char[] getResourcePrepend(char host[], KeyVal subdomains[])
		{
		for (int i = 0; i < subdomains.arrayLength; i ++)
			{
			if (subdomains[i].key == host) return subdomains[i].val
			}
		
		return null
		}
	
	bool serveFile(char command[], char ext[], Stream s, ConfigData cfg, bool keepAlive, bool includeContent)
		{
		char path[] = new char[](web_root, command)
		
		if (fileSystem.exists(path))
			{
			if (fileSystem.getInfo(path).type == FileInfo.TYPE_DIR)
				{
				//try common landing pages
				bool found = false
				for (int i = 0; i < cfg.landingPages.arrayLength; i++)
					{
					char test[] = new char[](path, cfg.landingPages[i].string)
					
					if (fileSystem.exists(test))
						{
						if (cfg.landingPages[i].string.endsWith(".html")) ext = "html"
						
						path = test
						found = true
						break
						}
					}
				
				if (!found)
					{
					return false
					}
				}
			
			
			File fd = new File(path, File.READ)
			s.send("HTTP/1.1 200 OK\r\n")
			s.send("Server: Dana Web Engine\r\n")
			if (!keepAlive)
				s.send("Connection: close\r\n")
				else
				s.send("Connection: keep-alive\r\n")
			s.send("Content-length: $(intUtil.intToString(fd.getSize()))\r\n")
			s.send("Content-Type: $(getMIMEType(ext, cfg.mimeTypes))\r\n")
			s.send("Date: $(util.getDateString(cal.getTime()))\r\n")
			s.send("Last-Modified: $(util.getDateString(fileSystem.getInfo(path).modified))\r\n")
			s.send("\r\n")
			
			if (includeContent)
				{
				while (!fd.eof())
					{
					byte buf[] = fd.read(MAX_CHUNK)
					s.send(buf)
					}
				}
			
			fd.close()
			
			return true
			}
		
		return false
		}
	
	bool staticFile(char command[], String staticServe[])
		{
		for (int i = 0; i < staticServe.arrayLength; i++)
			{
			if ((command.arrayLength >= staticServe[i].string.arrayLength) && 
				(stringUtil.subString(command, 0, staticServe[i].string.arrayLength) == staticServe[i].string))
				{
				return true
				}
			}
		
		return false
		}
	
	void processRequest(WorkItem work)
		{
		TCPSocket s = work.client
		TLS tlsSocket = work.tlsClient
		Stream stream = work.stream
		
		if (tlsSocket != null)
			{
			tlsSocket.accept(s)
			}
		
		String landingPages[] = work.landingPages
		String staticServe[] = work.cfg.staticServe
		
		bool keepAlive = true
		
		while (keepAlive)
			{
			//parse headers, extract command
			//call function associated with command, return result (as HTTP response)
			Command cmd = readCommand(work, stream)
			
			if (cmd == null)
				{
				//malformed / interrupted / idle-timeout request (this is normal behaviour)
				break
				}
			
			keepAlive = cmd.persistent
			
			char subDomainPath[] = getResourcePrepend(cmd.hostname, work.cfg.subdomains)
			char handler[]
			bool success = false
			
			if (cmd.type == Command.GET)
				{
				if (staticFile(cmd.resource, staticServe))
					{
					success = serveFile(cmd.resource, cmd.ext, stream, work.cfg, keepAlive, true)
					}
					else 
					{
					if (subDomainPath != null) cmd.resource = "/$subDomainPath$(cmd.resource)"
					
					DocStream ds = new DocStream(stream, cmd.headers)
					success = serveFunction_GET(ds, handler, cmd.resource)
					}
				}
				else if (cmd.type == Command.HEAD)
				{
				if (staticFile(cmd.resource, staticServe))
					{
					success = serveFile(cmd.resource, cmd.ext, stream, work.cfg, keepAlive, false)
					}
					else 
					{
					//TODO. -- what's the best option here? a Web.head() method? or just some auto-response?
					}
				}
				else if (cmd.type == Command.POST)
				{
				if (subDomainPath != null) cmd.resource = "/$subDomainPath$(cmd.resource)"
				
				DocStream ds = new DocStream(stream, cmd.headers)
				
				//read the payload first
				char ctype[] = getHeaderValue(cmd, "content-type")
				int plen = intUtil.intFromString(getHeaderValue(cmd, "content-length"))
				byte payload[] = stream.recv(plen)
				success = serveFunction_POST(ds, handler, cmd.resource, ctype, payload)
				}
				else
				{
				stream.send("HTTP/1.1 501 Not Implemented\r\n")
				stream.send("\r\n")
				success = true
				}
			
			if (!success)
				{
				if (fileSystem.exists("404.html"))
					{
					serveFile("404.html", "html", stream, work.cfg, keepAlive, cmd.type != Command.HEAD)
					}
					else
					{
					stream.send("HTTP/1.1 404 Resource Not Found\r\n")
					stream.send("Server: Dana Web Engine\r\n")
					if (keepAlive)
						stream.send("Connection: keep-alive\r\n")
						else
						stream.send("Connection: close\r\n")
					stream.send("Content-length: $(MSG_404.arrayLength)\r\n")
					stream.send("Date: $(util.getDateString(cal.getTime()))\r\n")
					stream.send("\r\n")
					stream.send(MSG_404)
					}
				}
			}
		
		if (tlsSocket != null) tlsSocket.close()
		s.disconnect()
		}
	
	RequestHandler:RequestHandler()
		{
		//start thread pool
		
		for (int i = 0; i < THREAD_POOL_SIZE; i++)
			{
			threadPool[i] = new WorkerThread()
			threadPool[i].thread = asynch::workerThread(threadPool[i])
			threadPool[i].threadID = i
			}
		
		asynch::timerThread()
		}
	
	void workerThread(store WorkerThread state)
		{
		while (true)
			{
			this.thread.wait()
			
			if (state.workCount != 0)
				{
				WorkItem w = state.work
				
				mutex(state)
					{
					w = state.work
					state.work = w.next
					if (state.work == null) state.lastWork = null
					}
				
				mutex(curWorkLock)
					{
					w.next = curWork
					if (curWork != null) curWork.prev = w
					curWork = w
					
					curWork.threadID = state.threadID
					}
				
				processRequest(w)
				
				mutex(curWorkLock)
					{
					if (w.prev != null) w.prev.next = w.next
					if (w.next != null) w.next.prev = w.prev
					if (w === curWork) curWork = w.next
					state.workCount --
					w = null
					}
				}
				else if (shutdown)
				{
				return
				}
			}
		}
	
	void timerThread()
		{
		while (true)
			{
			timer.sleep(TIMEOUT_INTERVAL)
			
			mutex(curWorkLock)
				{
				WorkItem cwi = curWork
				
				if (cwi == null && shutdown)
					{
					return
					}
				
				while (cwi != null)
					{
					if (cwi.waiting) cwi.idleTime += TIMEOUT_INTERVAL
					
					mutex(cwi)
						{
						if (cwi.idleTime >= MAX_INACTIVE)
							{
							if (cwi.tlsClient != null) cwi.tlsClient.close()
							cwi.client.disconnect()
							cwi.idleTime = 0
							cwi.killed = true
							}
						}
					
					cwi = cwi.next
					}
				}
			}
		}
	
	WorkerThread getWorker()
		{
		int smallestIndex = 0
		
		mutex(workerLock)
			{
			for (int i = 1; i < threadPool.arrayLength; i++)
				{
				if (threadPool[i].workCount < threadPool[smallestIndex].workCount)
					smallestIndex = i
				}
			}
		
		return threadPool[smallestIndex]
		}
	
	void RequestHandler:processStream(TCPSocket s, TLS tls, ConfigData cfg)
		{
		WorkerThread wt = getWorker()
		
		Stream stream = s
		
		if (tls != null) stream = tls
		
		WorkItem nwi = new WorkItem(s, tls, stream, cfg.landingPages, cfg)
		
		mutex(wt)
			{
			if (wt.lastWork == null)
				wt.work = nwi
				else
				wt.lastWork.next = nwi
			
			wt.lastWork = nwi
			
			wt.workCount ++
			}
		
		wt.thread.signal()
		}
	
	void Destructor:destroy()
		{
		shutdown = true
		
		for (int i = 0; i < threadPool.arrayLength; i++)
			{
			threadPool[i].thread.signal()
			threadPool[i].thread.join()
			}
		}
	
	}
