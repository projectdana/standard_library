data XYListener{
	XYMouseObject object
	XYListener next
	XYListener prev
	}

data GraphicsItem{
	GraphicsObject object
	GraphicsItem next
	GraphicsItem prev
	}

data ClickableItem{
	ClickableObject object
	ClickableItem next
	ClickableItem prev
	}

uses events.EventData

component provides Window requires Canvas, io.Output out, data.IntUtil iu {
	
	GraphicsItem buffer
	GraphicsItem bufferEnd
	
	ClickableItem clickItems
	ClickableItem clickItemsEnd
	
	Mutex mouseListenerLock = new Mutex()
	XYListener mouseListeners
	XYListener mouseListenersEnd
	
	KeyEventObject keyboardFocus
	
	int currentX = 100
	int currentY = 80
	
	int currentWidth = 500
	int currentHeight = 500
	
	int platformHandle
	
	bool isMaximised
	int restoredWidth
	int restoredHeight
	int restoredX
	int restoredY
	
	Color borderColor = new Color(190, 190, 200, 255)
	
	Canvas canvas
	
	eventsink Events(EventData ed)
		{
		if (ed.type == Canvas.[mouseUp])
			{
			MouseEvent me = ed.details
			click(me.x, me.y, me.button)
			mouseUp(me.x, me.y, me.button)
			}
			else if (ed.type == Canvas.[mouseDown])
			{
			MouseEvent me = ed.details
			mouseDown(me.x, me.y, me.button)
			}
			else if (ed.type == Canvas.[mouseMove])
			{
			MouseEvent me = ed.details
			mouseMove(me.x, me.y)
			}
			else if (ed.type == Canvas.[keyDown])
			{
			KeyEvent ke = ed.details
			keyDown(ke.keyCode)
			}
			else if (ed.type == Canvas.[keyUp])
			{
			KeyEvent ke = ed.details
			keyUp(ke.keyCode)
			}
			else if (ed.type == Canvas.[resizeWindow])
			{
			WH wh = ed.details
			setSize(wh.width, wh.height)
			}
			else if (ed.type == Canvas.[moveWindow])
			{
			Point xy = ed.details
			currentX = xy.x
			currentY = xy.y
			}
			else if (ed.type == Canvas.[closeWindow])
			{
			emitevent close()
			}
		}
	
	eventsink PaintEvents(EventData ed)
		{
		paint(null)
		}
	
	eventsink FocusEvents(EventData ed)
		{
		if (ed.type == KeyEventObject.[requestFocus])
			{
			keyboardFocus = ed.source
			emitevent requestFocus()
			}
		}
	
	Window:Window(char title[])
		{
		canvas = new Canvas()
		
		canvas.setTitle(title)
		
		sinkevent Events(canvas)
		}
	
	void Window:setVisible(bool b)
		{
		canvas.setVisible(b)
		}
	
	void Window:setResizable(bool b)
		{
		canvas.setResizable(b)
		}
	
	void Window:setFullScreen(bool b)
		{
		canvas.setFullScreen(b)
		}
	
	void Window:setTitle(char title[])
		{
		canvas.setTitle(title)
		}
	
	void Window:close()
		{
		canvas.close()
		}
	
	void Window:addObject(GraphicsObject go)
		{
		GraphicsItem newItem = new GraphicsItem(go)
		
		if (buffer == null)
			buffer = newItem
			else
			bufferEnd.next = newItem
		
		newItem.prev = bufferEnd
		bufferEnd = newItem
		
		if (go hastype ClickableObject)
			addClickTarget(go)
		
		if (go hastype KeyEventObject)
			{
			KeyEventObject ko = go
			sinkevent FocusEvents(ko)
			}
		
		sinkevent PaintEvents(go)
		
		paint(null)
		}
	
	void Window:remObject(GraphicsObject go)
		{
		for (GraphicsItem bi = buffer; bi != null; bi = bi.next)
			{
			if (bi.object === go)
				{
				GraphicsItem td = bi
				
				if (td.prev == null)
					buffer = td.next
					else
					td.prev.next = td.next
				
				if (td.next == null)
					bufferEnd = td.prev
					else
					td.next.prev = td.prev
				
				remClickTarget(go)
				
				break
				}
			}
		
		paint(null)
		}
	
	GraphicsObjectItem[] Window:getObjects()
		{
		return null
		}
	
	void Window:clearObjects()
		{
		
		}
	
	void addClickTarget(ClickableObject co)
		{
		ClickableItem nci = new ClickableItem(co)
		
		if (clickItems == null)
			clickItems = nci
			else
			clickItemsEnd.next = nci
		
		nci.prev = clickItemsEnd
		clickItemsEnd = nci
		}
	
	void remClickTarget(ClickableObject o)
		{
		for (ClickableItem ci = clickItems; ci != null; ci = ci.next)
			{
			if (ci.object === o)
				{
				ClickableItem td = ci
				
				if (td.prev == null)
					clickItems = td.next
					else
					td.prev.next = td.next
				
				if (td.next == null)
					clickItemsEnd = td.prev
					else
					td.next.prev = td.prev
				
				break
				}
			}
		}
	
	void addMouseEventTarget(XYMouseObject m)
		{
		XYListener nci = new XYListener(m)
		
		if (mouseListeners == null)
			mouseListeners = nci
			else
			mouseListenersEnd.next = nci
		
		nci.prev = mouseListenersEnd
		mouseListenersEnd = nci
		}
	
	void Window:setPosition(int x, int y)
		{
		currentX = x
		currentY = y
		canvas.setPosition(x, y)
		}
	
	void Window:setSize(int x, int y)
		{
		currentWidth = x
		currentHeight = y
		canvas.setSize(x, y)
		
		paint(null)
		}
	
	WH Window:getSize()
		{
		return new WH(currentWidth, currentHeight)
		}
	
	Rect Window:getRect()
		{
		return new Rect(currentX, currentY, currentWidth, currentHeight)
		}
	
	Point Window:getPosition()
		{
		return new Point(currentX, currentY)
		}
	
	void Window:setBackground(Color c)
		{
		canvas.setBackground(c)
		}
	
	Color Window:getBackground()
		{
		return null
		}
	
	void Window:paint(Canvas c)
		{
		for (GraphicsItem bi = buffer; bi != null; bi = bi.next)
			{
			bi.object.paint(canvas)
			}
		
		canvas.drawRectOutline(new Rect2D(0, 0, currentWidth, currentHeight, borderColor))
		
		canvas.paint()
		}
	
	WH Window:getPreferredSize()
		{
		return new WH(currentWidth, currentHeight)
		}
	
	Rect Window:getBounds()
		{
		return new Rect(0, 0, currentWidth, currentHeight)
		}
	
	void Window:postRepaint()
		{
		paint(null)
		}
	
	void Window:click(int x, int y, int button)
		{
		for (ClickableItem ci = clickItems; ci != null; ci = ci.next)
			{
			Rect r = ci.object.getBounds()
			
			if (x >= r.x && x <= r.x + r.width && y >= r.y && y <= r.y + r.height)
				{
				ci.object.click(x - r.x, y - r.y, button)
				
				if (ci.object hastype KeyEventObject)
					{
					keyboardFocus = ci.object
					}
				
				break
				}
			}
		}
	
	void Window:mouseDown(int x, int y, int button)
		{
		for (XYListener ci = mouseListeners; ci != null; ci = ci.next)
			{
			ci.object.mouseDown(x, y, button)
			}
		}
	
	void Window:mouseUp(int x, int y, int button)
		{
		for (XYListener ci = mouseListeners; ci != null; ci = ci.next)
			{
			ci.object.mouseUp(x, y, button)
			}
		}
	
	void Window:mouseMove(int x, int y)
		{
		for (XYListener ci = mouseListeners; ci != null; ci = ci.next)
			{
			ci.object.mouseMove(x, y)
			}
		}
	
	void Window:keyDown(int keyCode)
		{
		//get the "keyboard focus" item, if any, and dispatch a key event to it
		// (note this might be a panel, which in turn has a sub-item with keyboard focus)
		
		if (keyboardFocus != null)
			{
			keyboardFocus.keyDown(keyCode)
			}
		}
	
	void Window:keyUp(int keyCode)
		{
		if (keyboardFocus != null)
			{
			keyboardFocus.keyUp(keyCode)
			}
		}
	
	void Window:setFocus()
		{
		}
	}