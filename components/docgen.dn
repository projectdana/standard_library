data PrimaryType{
	char type[]
	char htmlFile[]
	}

const char OUTPUT_DIR[] = "_docs"
const bool SHOW_WARNINGS = true

component provides App requires parsing.DocBuilder, io.File, io.FileSystem fileSystem, data.json.JSONParser parser, data.StringUtil stringUtil, io.Output out, os.SystemInfo systemInfo, composition.Search csearch, composition.ObjectWriter, data.query.Search dsearch {
	
	char[] getHTMLFileFor(char sourceFile[], char type[])
		{
		char path[] = stringUtil.subString(sourceFile, 0, stringUtil.rfind(sourceFile, "."))
		
		path = stringUtil.implode(stringUtil.explode(path, "/\\"), "/")
		
		//replace the start of the path (i.e. "resources") with "doc"
		String tokens[] = clone stringUtil.explode(path, "/")
		tokens[0] = new String("")
		path = clone stringUtil.implode(tokens, ".")
		path[0] = " "
		path = stringUtil.ltrim(path)
		
		char tpath[] = new char[](path, "_$type.html")
		
		return tpath
		}
	
	char[] getTypeSource(SourceFile sf, char type[])
		{
		//check types from sf
		type = stringUtil.implode(stringUtil.explode(type, "[]"), "")
		for (int i = 0; i < sf.types.arrayLength; i++)
			{
			if (sf.types[i].name == type)
				{
				return getHTMLFileFor(sf.path, type)
				}
			}
		
		//now check all secondary files used by sf
		for (int i = 0; i < sf.supportFiles.arrayLength; i++)
			{
			for (int j = 0; j < sf.supportFiles[i].types.arrayLength; j++)
				{
				if (sf.supportFiles[i].types[j].name == type)
					{
					return getHTMLFileFor(sf.supportFiles[i].path, type)
					}
				}
			}
		
		return null
		}
	
	char[] formatType(SourceFile sf, char type[], opt bool optional)
		{
		//check if the type is declared anywhere in sf or any secondary file; if so create a hyperlink to its doc file
		char sfn[] = getTypeSource(sf, type)
		
		if (sfn != null)
			{
			if (optional)
				type = new char[]("<a href = \"$sfn\" class = \"doc_type_link_opt\">$type</a>")
				else
				type = new char[]("<a href = \"$sfn\" class = \"doc_type_link\">$type</a>")
			}
		
		return type
		}
	
	char[] formatFunctionHeader(SourceFile sf, FunctionDef f)
		{
		char result[]
		
		result = new char[](result, formatType(sf, f.returnType), " ", f.name)
		
		result = new char[](result, "(")
		
		bool optLatch = false
		
		for (int q = 0; q < f.params.arrayLength; q++)
			{
			if (f.params[q].opt_param && !optLatch)
				{
				result = new char[](result, "<span class = \"doc_function_opt_group\"><span class = \"doc_function_param_opt\">optional</span> ")
				optLatch = true
				}
			
			if (f.params[q].scope_store)
				result = new char[](result, "<span class = \"doc_function_param_store\">store</span>", formatType(sf, f.params[q].type, optLatch), " ", f.params[q].displayName)
				else
				result = new char[](result, formatType(sf, f.params[q].type, optLatch), " ", f.params[q].displayName)
			
			if (q + 1 < f.params.arrayLength) result = new char[](result, ", ")
			}
		
		if (optLatch) result = new char[](result, "</span>")
		
		result = new char[](result, ")")
		
		return result
		}
	
	char[] formatEventHeader(SourceFile sf, EventSourceDef f)
		{
		char result[]
		
		result = new char[](result, f.name)
		
		result = new char[](result, "(")
		
		for (int q = 0; q < f.params.arrayLength; q++)
			{
			result = new char[](result, formatType(sf, f.params[q].type), " ", f.params[q].displayName)
			
			if (q + 1 < f.params.arrayLength) result = new char[](result, ", ")
			}
		result = new char[](result, ")")
		
		return result
		}
	
	String[] getSemanticVariants(String components[], char searchPackage[])
		{
		String result[]
		
		//read each component, and check for which variant of package it implements (if not default)
		for (int i = 0; i < components.arrayLength; i++)
			{
			ObjectWriter ow = new ObjectWriter(components[i].string)
			
			char intfData[] = ow.getInfoSection("DNIL", "json").content
			
			JSONElement doc = parser.parseDocument(intfData)
			
			JSONElement providedInterfaces = parser.getValue(doc, "providedInterfaces")
			
			for (int k = 0; k < providedInterfaces.children.arrayLength; k++)
				{
				JSONElement pi = providedInterfaces.children[k]
				char package[] = parser.getValue(pi, "package").value
				
				if (package == searchPackage)
					{
					char semantic[] = "&lt;default&gt;"
					if (parser.getValue(pi, "semantic") != null)
						semantic = parser.getValue(pi, "semantic").value
					
					if (dsearch.search(result, String.[string], new String(semantic)) == null)
						{
						result = new String[](result, new String(semantic))
						}
					}
				}
			}
		
		return result
		}
	
	bool isDeprecated(char str[])
		{
		if (str != null)
			{
			JSONElement doc = parser.parseDocument(str)
			
			if (parser.getValue(doc, "@deprecated") != null && parser.getValue(doc, "@deprecated").value == "true")
				return true
			}
		
		return false
		}
	
	void writeFile(SourceFile sf)
		{
		//put "html" on the end
		char path[] = stringUtil.subString(sf.path, 0, stringUtil.rfind(sf.path, "."))
		
		path = stringUtil.implode(stringUtil.explode(path, "/\\"), "/")
		
		//replace the start of the path (i.e. "resources") with "doc"
		String tokens[] = clone stringUtil.explode(path, "/")
		tokens[0] = new String(OUTPUT_DIR)
		path = stringUtil.implode(tokens, "/")
		
		//get the "include" package
		tokens[0] = new String("")
		char includePackage[] = clone stringUtil.implode(tokens, ".")
		includePackage[0] = " "
		
		//we write each type separately, and at the top of each HTML file indicate which resource file must be used
		
		for (int i = 0; i < sf.types.arrayLength; i++)
			{
			if (sf.types[i].class == TypeDef.OBJECT)
				{
				InterfaceDef id = sf.types[i]
				
				if (!isDeprecated(id.doc_description))
					{
					char tpath[] = new char[]("$OUTPUT_DIR/files/", getHTMLFileFor(sf.path, id.name))
					
					if (fileSystem.exists(tpath))
						fileSystem.delete(tpath)
					
					File fd = new File(tpath, File.WRITE)
					
					if (fd != null)
						{
						fd.write("<html>")
						fd.write("<link href=\"doc.css\" rel=\"stylesheet\" type=\"text/css\">")
						fd.write("<body>")
						
						fd.write("<div class = \"doc_heading_line\">")
						fd.write("<span class = \"doc_heading_text\">Interface</span> <span class = \"doc_heading_type\">$(id.name)</span>")
						fd.write("</div>")
						
						//what to include to use this type
						fd.write("<div class = \"doc_include_line\">")
						fd.write("<span class = \"doc_include_text\">access this type via:</span> <span class = \"doc_include_path\">$includePackage</span> (provides, requires or uses)")
						fd.write("</div>")
						
						//extends?
						if (id.extendsType != null)
							{
							fd.write("<div class = \"doc_include_line\">")
							fd.write("<span class = \"doc_include_text\"> --- extends:</span>")
							fd.write(formatType(sf, id.extendsType.name))
							fd.write("</div>")
							}
						
						//semantic variants?
						String implementations[] = new String[](csearch.getComponents(stringUtil.trim(includePackage)), csearch.getComponents("$(stringUtil.trim(includePackage)):*"))
						String svars[] = getSemanticVariants(implementations, stringUtil.trim(includePackage))
						
						if (svars.arrayLength > 1 || (svars.arrayLength == 1 && svars[0].string != "&lt;default&gt;"))
							{
							fd.write("<div class = \"doc_semantic_line\">")
							fd.write("<span class = \"doc_semantic_text\"> --- semantic variants:</span>")
							
							for (int j = 0; j < svars.arrayLength; j++)
								{
								if (j > 0) fd.write(",")
								
								fd.write(" ")
								fd.write(svars[j].string)
								}
							
							fd.write("</div>")
							}
						
						//the overall interface description
						if (id.doc_description != null)
							{
							JSONElement doc = parser.parseDocument(id.doc_description)
							
							if (doc == null) out.println("invalid docstring '$(id.doc_description)' for interface $(id.name) defined in $(sf.path)")
							
							fd.write("<div class = \"doc_description\">")
							fd.write(parser.getValue(doc, "description").value)
							fd.write("</div>")
							}
							else
							{
							if (SHOW_WARNINGS) out.println("[warning] type $(id.name) has no summary documentation")
							}
						
						//summary of the interface
						// - constants
						
						if (id.constants.arrayLength > 0)
							{
							fd.write("<div class = \"doc_const_list\">")
							
							fd.write("<div class = \"doc_const_list_hdr\">")
							fd.write("Constants")
							fd.write("</div>")
							
							for (int j = 0; j < id.constants.arrayLength; j++)
								{
								if (isDeprecated(id.constants[j].doc_description))
									fd.write("<div class = \"doc_const_list_item_deprecated\">")
									else
									fd.write("<div class = \"doc_const_list_item\">")
								
								fd.write(formatType(sf, id.constants[j].type))
								fd.write(" ")
								fd.write(id.constants[j].displayName)
								fd.write("</div>")
								}
							fd.write("</div>")
							}
						
						// - transfer fields
						
						if (id.transferFields.arrayLength > 0)
							{
							fd.write("<div class = \"doc_transfer_list\">")
							
							fd.write("<div class = \"doc_transfer_list_hdr\">")
							fd.write("Transfer fields")
							fd.write("</div>")
							
							for (int j = 0; j < id.transferFields.arrayLength; j++)
								{
								fd.write("<div class = \"doc_transfer_list_item\">")
								fd.write(formatType(sf, id.transferFields[j].type))
								fd.write(" ")
								fd.write(id.transferFields[j].displayName)
								fd.write("</div>")
								}
							fd.write("</div>")
							}
						
						// - event sources
						
						if (id.eventSources.arrayLength > 0)
							{
							fd.write("<div class = \"doc_eventsource_list\">")
							
							fd.write("<div class = \"doc_eventsource_list_hdr\">")
							fd.write("Events")
							fd.write("</div>")
							
							for (int j = 0; j < id.eventSources.arrayLength; j++)
								{
								fd.write("<div class = \"doc_eventsource_list_item\">")
								//fd.write(formatType(sf, id.eventSources[j].type))
								//fd.write(" ")
								//fd.write(id.eventSources[j].displayName)
								//fd.write(id.eventSources[j].displayName)
								fd.write(formatEventHeader(sf, id.eventSources[j]))
								fd.write("</div>")
								}
							fd.write("</div>")
							}
						
						// - the list of functions as a summary (with hyperlinks to their descriptions)
						
						fd.write("<div class = \"doc_function_list\">")
						
						fd.write("<div class = \"doc_function_list_hdr\">")
						fd.write("Functions")
						fd.write("</div>")
						
						for (int j = 0; j < id.functions.arrayLength; j++)
							{
							bool deprecated = isDeprecated(id.functions[j].doc_description)
							
							if (deprecated)
								fd.write("<div class = \"doc_function_list_item_deprecated\">")
								else
								fd.write("<div class = \"doc_function_list_item\">")
							fd.write(formatFunctionHeader(sf, id.functions[j]))
							fd.write("</div>")
							}
						fd.write("</div>")
						
						//the list of constants in detail
						if (id.constants.arrayLength > 0)
							{
							fd.write("<div class = \"doc_function_description\">")
							
							fd.write("<div class = \"doc_constant_fields_heading\">")
							
							fd.write("Constants")
							
							fd.write("</div>")
							
							fd.write("<div class = \"doc_function_description_parameters\">")
							for (int j = 0; j < id.constants.arrayLength; j++)
								{
								char desc[] = null
								
								if (id.constants[j].doc_description != null)
									{
									JSONElement doc = parser.parseDocument(id.constants[j].doc_description)
									if (parser.getValue(doc, "@description") != null)
										desc = parser.getValue(doc, "@description").value
									}
									else
									{
									if (SHOW_WARNINGS) out.println("[warning] element $(id.name).$(id.constants[j].name) has no documentation")
									}
								
								if (isDeprecated(id.constants[j].doc_description))
									fd.write("<div class = \"doc_constant_desc_deprecated\">")
									else
									fd.write("<div class = \"doc_constant_desc\">")
								fd.write("<span class = \"doc_function_description_param_name\">$(id.constants[j].name)</span> ")
								fd.write("<span class = \"doc_function_description_param_desc\">$desc</span>")
								fd.write("</div>")
								}
							fd.write("</div>")
							
							fd.write("</div>")
							}
						
						//the list of transfer fields in detail
						if (id.transferFields.arrayLength > 0)
							{
							fd.write("<div class = \"doc_function_description\">")
							
							fd.write("<div class = \"doc_transfer_fields_heading\">")
							
							fd.write("Transfer fields")
							
							fd.write("</div>")
							
							fd.write("<div class = \"doc_function_description_parameters\">")
							for (int j = 0; j < id.transferFields.arrayLength; j++)
								{
								char desc[] = null
								
								if (id.transferFields[j].doc_description != null)
									{
									JSONElement doc = parser.parseDocument(id.transferFields[j].doc_description)
									if (parser.getValue(doc, "@description") != null)
										desc = parser.getValue(doc, "@description").value
									}
									else
									{
									if (SHOW_WARNINGS) out.println("[warning] element $(id.name).$(id.transferFields[j].name) has no documentation")
									}
								
								fd.write("<div class = \"doc_transfer_field\">")
								fd.write("<span class = \"doc_function_description_param_name\">$(id.transferFields[j].name)</span> ")
								fd.write("<span class = \"doc_function_description_param_desc\">$desc</span>")
								fd.write("</div>")
								}
							fd.write("</div>")
							
							fd.write("</div>")
							}
						
						//the list of eventsource fields in detail
						if (id.eventSources.arrayLength > 0)
							{
							fd.write("<div class = \"doc_function_description\">")
							
							fd.write("<div class = \"doc_event_sources_heading\">")
							
							fd.write("Events")
							
							fd.write("</div>")
							
							fd.write("<div class = \"doc_function_description_parameters\">")
							for (int j = 0; j < id.eventSources.arrayLength; j++)
								{
								char desc[] = null
								
								if (id.eventSources[j].doc_description != null)
									{
									JSONElement doc = parser.parseDocument(id.eventSources[j].doc_description)
									if (parser.getValue(doc, "@description") != null)
										desc = parser.getValue(doc, "@description").value
									}
									else
									{
									if (SHOW_WARNINGS) out.println("[warning] element $(id.name).$(id.eventSources[j].name) has no documentation")
									}
								
								fd.write("<div class = \"doc_event_source\">")
								fd.write("<span class = \"doc_function_description_param_name\">$(id.eventSources[j].name)</span> ")
								fd.write("<span class = \"doc_function_description_param_desc\">$desc</span>")
								fd.write("</div>")
								}
							fd.write("</div>")
							
							fd.write("</div>")
							}
						
						//the list of functions in detail, with parameter descriptions etc.
						for (int j = 0; j < id.functions.arrayLength; j++)
							{
							bool deprecated = isDeprecated(id.functions[j].doc_description)
							
							if (deprecated)
								fd.write("<div class = \"doc_function_description_deprecated\">")
								else
								fd.write("<div class = \"doc_function_description\">")
							
								fd.write("<div class = \"doc_function_description_heading\">")
								fd.write(formatFunctionHeader(sf, id.functions[j]))
								fd.write("</div>")
								
								if (id.functions[j].doc_description != null)
									{
									JSONElement doc = parser.parseDocument(id.functions[j].doc_description)
									
									if (parser.getValue(doc, "@description") != null)
										{
										fd.write("<div>")
										fd.write(parser.getValue(doc, "@description").value)
										fd.write("</div>")
										}
									}
									else
									{
									if (SHOW_WARNINGS) out.println("[warning] element $(id.name).$(id.functions[j].name) has no documentation")
									}
								
								//description of each parameter
								fd.write("<div class = \"doc_function_description_parameters\">")
								for (int q = 0; q < id.functions[j].params.arrayLength; q++)
									{
									char desc[] = null
									
									if (id.functions[j].doc_description != null)
										{
										JSONElement doc = parser.parseDocument(id.functions[j].doc_description)
										if (parser.getValue(doc, id.functions[j].params[q].name) != null)
											desc = parser.getValue(doc, id.functions[j].params[q].name).value
										}
									
									if (desc != null)
										{
										fd.write("<div class = \"doc_function_description_param\">")
										
										fd.write("<span class = \"doc_function_description_param_name\">$(id.functions[j].params[q].name)</span> ")
										
										fd.write("<span class = \"doc_function_description_param_desc\">$desc</span>")
										
										fd.write("</div>")
										}
									}
								fd.write("</div>")
								
								//description of return value
								fd.write("<div class = \"doc_function_description_return\">")
								char desc[] = null
								
								if (id.functions[j].doc_description != null)
									{
									JSONElement doc = parser.parseDocument(id.functions[j].doc_description)
									if (parser.getValue(doc, "@return") != null)
										desc = parser.getValue(doc, "@return").value
									}
								
								if (desc != null)
									{
									fd.write("<div class = \"doc_function_description_param\">")
									
									fd.write("<span class = \"doc_function_description_param_name\">returns:</span> ")
									
									fd.write("<span class = \"doc_function_description_param_desc\">$desc</span>")
									
									fd.write("</div>")
									}
								
								fd.write("</div>")
								
							fd.write("</div>")
							}
						
						//TODO: a list of known implementations, with any documentation that those specific implementations have
						// ...
						
						fd.write("</body>")
						fd.write("</html>")
						
						fd.close()
						}
					}
				}
			}
		
		for (int i = 0; i < sf.types.arrayLength; i++)
			{
			if (sf.types[i].class == TypeDef.DATA)
				{
				DataDef td = sf.types[i]
				
				char tpath[] = new char[]("$OUTPUT_DIR/files/", getHTMLFileFor(sf.path, td.name))
				
				if (fileSystem.exists(tpath))
					fileSystem.delete(tpath)
				
				File fd = new File(tpath, File.WRITE)
				
				if (fd != null)
					{
					fd.write("<html>")
					fd.write("<link href=\"doc.css\" rel=\"stylesheet\" type=\"text/css\">")
					fd.write("<body>")
					
					fd.write("<div class = \"doc_heading_line\">")
					fd.write("<span class = \"doc_heading_text\">Data type</span> <span class = \"doc_heading_type\">$(td.name)</span>")
					fd.write("</div>")
					
					//what to include to use this type
					fd.write("<div class = \"doc_include_line\">")
					fd.write("<span class = \"doc_include_text\">access this type via:</span> <span class = \"doc_include_path\">$includePackage</span> (uses)")
					fd.write("</div>")
					
					//extends?
					if (td.extendsType != null)
						{
						fd.write("<div class = \"doc_include_line\">")
						fd.write("<span class = \"doc_include_text\"> --- extends:</span>")
						fd.write(formatType(sf, td.extendsType.name))
						fd.write("</div>")
						}
					
					//the overall type description
					if (td.doc_description != null)
						{
						JSONElement doc = parser.parseDocument(td.doc_description)
						
						fd.write("<div class = \"doc_description\">")
						fd.write(parser.getValue(doc, "description").value)
						fd.write("</div>")
						}
						else
						{
						if (SHOW_WARNINGS) out.println("[warning] type $(td.name) has no summary documentation")
						}
					
					//the list of fields as a summary (with hyperlinks to their descriptions)
					if (td.constants.arrayLength > 0)
						{
						fd.write("<div class = \"doc_const_list\">")
						
						fd.write("<div class = \"doc_const_list_hdr\">")
						fd.write("Constants")
						fd.write("</div>")
						
						for (int j = 0; j < td.constants.arrayLength; j++)
							{
							char desc[] = null
							
							if (td.constants[j].doc_description != null)
								{
								JSONElement doc = parser.parseDocument(td.constants[j].doc_description)
								if (parser.getValue(doc, "@description") != null)
									desc = parser.getValue(doc, "@description").value
								}
							
							/*
							if (isDeprecated(td.constants[j].doc_description))
								fd.write("<div class = \"doc_constant_desc_deprecated\">")
								else
								fd.write("<div class = \"doc_constant_desc\">")
							*/
							fd.write("<div class = \"doc_const_list_item\">")
							fd.write("<span class = \"doc_data_field_entry\">")
							
							fd.write(formatType(sf, td.constants[j].type))
							fd.write(" ")
							fd.write(td.constants[j].displayName)
							fd.write("</span>")
							
							if (desc != null)
								{
								fd.write(" <span class = \"doc_data_field_desc\">$desc</span>")
								}
								else
								{
								if (SHOW_WARNINGS) out.println("[warning] element $(td.name).$(td.constants[j].displayName) has no documentation")
								}
							
							fd.write("</div>")
							}
						fd.write("</div>")
						}
					
					if (td.fields.arrayLength > 0)
						{
						fd.write("<div class = \"doc_function_list\">")
						
						fd.write("<div class = \"doc_function_list_hdr\">")
						fd.write("Fields")
						fd.write("</div>")
						
						for (int j = 0; j < td.fields.arrayLength; j++)
							{
							char desc[] = null
							
							if (td.fields[j].doc_description != null)
								{
								JSONElement doc = parser.parseDocument(td.fields[j].doc_description)
								if (parser.getValue(doc, "@description") != null)
									desc = parser.getValue(doc, "@description").value
								}
							
							fd.write("<div class = \"doc_function_list_item\">")
							fd.write("<span class = \"doc_data_field_entry\">")
							fd.write(formatType(sf, td.fields[j].type))
							fd.write(" ")
							fd.write(td.fields[j].displayName)
							fd.write("</span>")
							
							if (desc != null)
								{
								fd.write(" <span class = \"doc_data_field_desc\">$desc</span>")
								}
								else
								{
								if (SHOW_WARNINGS) out.println("[warning] element $(td.name).$(td.fields[j].displayName) has no documentation")
								}
							
							fd.write("</div>")
							}
						fd.write("</div>")
						}
					
					fd.write("</body>")
					fd.write("</html>")
					
					fd.close()
					}
				}
			}
		}
	
	char[] getPrimaryType(SourceFile sf)
		{
		String tokens[] = stringUtil.explode(sf.path, "./\\")
		char name[] = tokens[tokens.arrayLength-2].string
		
		for (int i = 0; i < sf.types.arrayLength; i++)
			{
			if (sf.types[i].name == name)
				return name
			}
		
		return null
		}
	
	bool alphaGreater(char a[], char b[])
		{
		a = stringUtil.lowercase(a)
		b = stringUtil.lowercase(b)
		
		for (int i = 0; i < a.arrayLength && i < b.arrayLength; i++)
			{
			if (a[i] > b[i])
				return true
				else if (a[i] < b[i])
				return false
			}
		
		if (a.arrayLength > b.arrayLength)
			return true
		
		return false
		}
	
	void sortTypes(PrimaryType types[])
		{
		bool sorted = false
		
		while (!sorted)
			{
			sorted = true
			
			for (int i = 0; i < types.arrayLength - 1; i++)
				{
				if (alphaGreater(types[i].type, types[i+1].type))
					{
					PrimaryType tmp = types[i]
					types[i] = types[i+1]
					types[i+1] = tmp
					
					sorted = false
					break
					}
				}
			}
		}
	
	void writeDocs(ParsedFiles p, bool writeIndex)
		{
		if (!fileSystem.exists(OUTPUT_DIR))
			fileSystem.createDirectory(OUTPUT_DIR)
		
		if (!fileSystem.exists("$OUTPUT_DIR/files"))
			fileSystem.createDirectory("$OUTPUT_DIR/files")
		
		out.println("Scanning components and generating pages")
		
		//generate a set of HTML files for p.primaryFiles
		for (int i = 0; i < p.primaryFiles.arrayLength; i++)
			{
			writeFile(p.primaryFiles[i])
			}
		
		if (writeIndex)
			{
			out.println("Generating index page")
			
			if (fileSystem.exists("$OUTPUT_DIR/index.html"))
				fileSystem.delete("$OUTPUT_DIR/index.html")
			
			//generate the index HTML file
			File fd = new File("$OUTPUT_DIR/index.html", File.WRITE)
			
			if (fd != null)
				{
				//build an alphabetically sorted list of primary types first, then write them
				PrimaryType types[]
				
				for (int i = 0; i < p.primaryFiles.arrayLength; i++)
					{
					char type[] = getPrimaryType(p.primaryFiles[i])
					
					if (type != null)
						{
						char xf[] = getHTMLFileFor(p.primaryFiles[i].path, type)
						
						//check the file exists (it won't do if it's a deprecated API)
						if (fileSystem.exists("$OUTPUT_DIR/files/$xf"))
							{
							types = new PrimaryType[](types, new PrimaryType(type, xf))
							}
						}
					}
				
				//sort alphabetically
				sortTypes(types)
				
				char dana_home[] = systemInfo.getVariable("DANA_HOME")
				
				File ref = new File("$dana_home/resources-ext/doc/index_a.html", File.READ)
				fd.write(ref.read(ref.getSize()))
				ref.close()
				
				for (int i = 0; i < types.arrayLength; i++)
					{
					fd.write("<div>")
					fd.write("<a href = \"files/$(types[i].htmlFile)\" target = \"_core\">$(types[i].type)</a>")
					fd.write("</div>")
					}
				
				ref = new File("$dana_home/resources-ext/doc/index_b.html", File.READ)
				fd.write(ref.read(ref.getSize()))
				ref.close()
				
				fd.close()
				
				//copy in the CSS file
				fd = new File("$OUTPUT_DIR/doc.css", File.WRITE)
				ref = new File("$dana_home/resources-ext/doc/doc.css", File.READ)
				fd.write(ref.read(ref.getSize()))
				ref.close()
				fd.close()
				
				fd = new File("$OUTPUT_DIR/files/doc.css", File.WRITE)
				ref = new File("$dana_home/resources-ext/doc/doc.css", File.READ)
				fd.write(ref.read(ref.getSize()))
				ref.close()
				fd.close()
				}
			}
		}
	
	void scanDirectory(DocBuilder docBuilder, char path[])
		{
		FileEntry files[] = fileSystem.getDirectoryContents(path)
		
		for (int i = 0; i < files.arrayLength; i++)
			{
			char filePath[] = new char[](path, "/", files[i].name)
			
			if (fileSystem.getInfo(filePath).type == FileInfo.TYPE_FILE)
				{
				out.println("Parsing $filePath")
				docBuilder.parseFile(filePath)
				}
				else
				{
				scanDirectory(docBuilder, filePath)
				}
			}
		}
	
	int App:main(AppParam params[])
		{
		DocBuilder docBuilder = new DocBuilder()
		
		bool writeIndex = false
		
		if (params.arrayLength > 0)
			{
			out.println("Parsing $(params[0].string)")
			docBuilder.parseFile(params[0].string)
			}
			else
			{
			if (fileSystem.exists("resources") && fileSystem.getInfo("resources").type == FileInfo.TYPE_DIR)
				{
				scanDirectory(docBuilder, "resources")
				writeIndex = true
				}
			}
		
		ParsedFiles p = docBuilder.getParsedFiles()
		
		writeDocs(p, writeIndex)
		
		return 0
		}
	
	}