uses data.String

data Sample {
	dec values[]
	Series series
	}

data Series {
	char name[]
	char displayName[]
	Color seriesColor
	}

data Bar {
	char category[]
	List samples
	}

//marker length in pixels (the "ticks" on the axes)
const int MARKER_LENGTH = 3

const int MARKER_SIZE = 7

const int LEGEND_SQ_SIZE = 10
const int LEGEND_PAD_SIZE = 5

component provides CategoryMulti:barcode requires ChartCore, stats.StatCore stcore, io.Output out, data.IntUtil iu, data.DecUtil du, ui.Font, data.query.Search search, data.adt.List {
	
	Series series[]
	Bar categories[]
	
	Color stdDevColor = new Color(0, 0, 0, 255)
	Color axisColor = new Color(0, 0, 0, 255)
	Color gridColor = new Color(220, 220, 220, 255)
	Color bgColor = new Color(255, 255, 255, 255)
	
	Font axisFont
	Font labelFont
	
	dec highestX
	dec lowestX
	dec highestY
	dec lowestY
	
	dec numberIntervalX = 1.0
	dec markerIntervalX = 1.0
	
	dec numberIntervalY
	dec markerIntervalY
	dec gridIntervalY
	
	dec xAxMax
	dec xAxMin
	dec yAxMax
	dec yAxMin
	
	//bar width, in percentage of category area
	dec barWidth = 60.0
	int barPad = 0
	
	bool showStdDev
	bool showLegend

	byte legendPosition = CategoryMulti.L_INSIDE
	byte legendModX = 0
	byte legendModY = 10

	int originWidth = 0
	int originHeight = 0
	
	CategoryMulti:CategoryMulti()
		{
		super()
		
		axisFont = new Font("SourceSansPro.ttf", 12)
		
		setXMarkerInterval(1.0)
		}
	
	void CategoryMulti:setSize(int w, int h)
		{
		originWidth = w
		originHeight = h
		
		if (legendPosition == CategoryMulti.L_OUTSIDE)
			{
			int q = getLongestSeriesName() + LEGEND_SQ_SIZE + LEGEND_SQ_SIZE + LEGEND_SQ_SIZE
			w -= q
			}

		super(w, h)
		}
	
	void CategoryMulti:addSeries(char name[], opt store Color color)
		{
		if (color == null) color = new Color(100, 200, 200, 255)

		if (series.findFirst(Series.[name], new Series(name)) == null)
			series = new Series[](series, new Series(name, name, color))
		}
	
	void CategoryMulti:addSample(char seriesName[], char cat[], dec yvalues[], opt bool redraw)
		{
		Bar bar = null

		Series n = series.findFirst(Series.[name], new Series(seriesName))

		if (n == null)
			{
			throw new Exception("unknown series '$seriesName'; series must first be added using addSeries()")
			}
		
		if ((bar = categories.findFirst(Bar.[category], new Bar(cat))) == null)
			{
			bar = new Bar(cat)
			bar.samples = new List()
			categories = new Bar[](categories, bar)
			}
		
		//add sample
		bar.samples.add(new Sample(yvalues, n))
		
		if (redraw) postRepaint()
		}
	
	void CategoryMulti:setYMinMax(dec min, dec max)
		{
		//TODO: disallow values that can't contain all of the graph points...
		yAxMin = min
		yAxMax = max
		
		super(min, max)
		}
	
	void CategoryMulti:setYLabelInterval(dec ivr)
		{
		numberIntervalY = ivr
		super(ivr)
		}
	
	void CategoryMulti:setSeriesColor(char seriesName[], Color c)
		{
		Series n = series.findFirst(Series.[name], new Series(seriesName))
		
		n.seriesColor = c
		}
	
	void CategoryMulti:setSeriesName(char seriesName[], char displayName[])
		{
		Series n = series.findFirst(Series.[name], new Series(seriesName))
		
		n.displayName = displayName
		}
	
	void CategoryMulti:showErrorBars(bool on)
		{
		showStdDev = on
		}
	
	void CategoryMulti:clampErrorBars(dec low, dec high)
		{
		
		}
	
	void CategoryMulti:showLegend(bool on)
		{
		showLegend = on

		postRepaint()
		}
	
	void CategoryMulti:setLegendPosition(byte type, opt int x, int y)
		{
		legendPosition = type
		if (isset x) legendModX = x
		if (isset y) legendModY = y

		setSize(originWidth, originHeight)

		postRepaint()
		}
	
	void CategoryMulti:setAxisFont(Font f)
		{
		axisFont = f
		super(f)
		}
	
	void CategoryMulti:setCatDisplayWidth(dec percent)
		{
		if (percent <= 0.0 || percent > 100.0)
			throw new Exception("display width must be a percentage, between 1 and 100")
		
		barWidth = percent
		}
	
	void CategoryMulti:setCatDisplayPadding(int pixels)
		{
		barPad = pixels
		}
	
	bool prepAxisLimits()
		{
		dec highX
		dec lowX
		dec highY
		dec lowY
		
		for (int i = 0; i < categories.arrayLength; i++)
			{
			dec barTop = 0.0
			dec barLow = 0.0
			
			for (Sample s = categories[i].samples.getFirst(); s != null; s = categories[i].samples.getNext())
				{
				//add it to the bar, by going on to the top or below the bottom, depending on whether it's positive or negative...
				
				dec mean = stcore.mean(s.values)
				
				if (mean > 0.0)
					{
					dec topY = barTop + mean
					
					barTop = topY
					}
					else
					{
					dec botY = barLow - mean
					
					barLow = botY
					}
				}
			
			if (barTop > highY) highY = barTop
			if (barLow < lowY) lowY = barLow
			
			highX += 1.0
			}
		
		if (lowY == highY) return false
		
		setXMinMax(lowX, highX)
		setYMinMax(lowY, highY)

		return true
		}
	
	int getLongestSeriesName()
		{
		int result = 0
		
		for (int i = 0; i < series.arrayLength; i++)
			{
			int wd = axisFont.getTextWidth(series[i].displayName)
			
			if (wd > result) result = wd
			}
		
		return result
		}
	
	void drawLegend(Canvas c)
		{
		//calculate the longest series name, and offset the legend by this much from the right (plus the legend color square width)
		int longestTxt = getLongestSeriesName()
		
		int yPos = legendModY
		int xStart

		if (legendPosition == CategoryMulti.L_INSIDE || legendPosition == CategoryMulti.L_OUTSIDE)
			xStart = (originWidth - (longestTxt + LEGEND_SQ_SIZE + LEGEND_SQ_SIZE + LEGEND_SQ_SIZE)) + legendModX
			else if (legendPosition == CategoryMulti.L_ABSOLUTE)
			xStart = legendModX
		
		int textHeight = axisFont.getFontMetrics().height
		
		int totalLegendHeight = ((textHeight + 5) * (series.arrayLength-1)) + textHeight
		int totalLegendWidth = (longestTxt + LEGEND_SQ_SIZE + LEGEND_SQ_SIZE)
		
		c.rect(new Rect2D(xStart - LEGEND_PAD_SIZE, yPos - LEGEND_PAD_SIZE, totalLegendWidth + (LEGEND_PAD_SIZE*2), totalLegendHeight + (LEGEND_PAD_SIZE*2), bgColor))
		c.rectOutline(new Rect2D(xStart - LEGEND_PAD_SIZE, yPos - LEGEND_PAD_SIZE, totalLegendWidth + (LEGEND_PAD_SIZE*2), totalLegendHeight + (LEGEND_PAD_SIZE*2), axisColor))
		
		yPos += (axisFont.getFontMetrics().descent)
		
		for (int i = series.arrayLength - 1; i != INT_MAX; i--)
			{
			c.rect(new Rect2D(xStart, yPos, LEGEND_SQ_SIZE, LEGEND_SQ_SIZE, series[i].seriesColor))
			
			int yOffset = (yPos + (LEGEND_SQ_SIZE / 2)) - (textHeight / 2)
			c.text(new Point2D(xStart + LEGEND_SQ_SIZE + LEGEND_SQ_SIZE, yOffset, axisColor), axisFont, series[i].displayName)
			
			yPos += textHeight + 5
			}
		}
	
	void CategoryMulti:paint(Canvas c)
		{
		if (!prepAxisLimits())
			{
			throw new Exception("chart has no data to plot (min and max data point values are equal)")
			}
		
		Point pos = getPosition()
		
		c.pushSurface(new Rect(pos.x, pos.y, originWidth, originHeight), 0, 0, 255)
		
		preparePlotArea()
		
		//background
		c.rect(new Rect2D(0, 0, originWidth, originHeight, bgColor))
		
		//grid lines, if any
		drawGrid(c)
		
		//data
		
		int xyA[] = getPlotPoint(0.0, 0.0)
		int xyB[] = getPlotPoint(1.0, 0.0)
		
		dec thisX = 0.0
		
		//we pre-compute the "bar offset" within the category space, as the distance from the left-side of that space
		// - we then use the same offset for each category space, which gives a more uniform look
		
		for (int i = 0; i < categories.arrayLength; i++)
			{
			dec barTop = 0.0
			dec barLow = 0.0
			
			int xyZ[] = getPlotPoint(thisX, barTop)
			int xyZ1[] = getPlotPoint(thisX+1.0, 0.0)
			
			int xSpacing = ((xyZ1[0] - xyZ[0])+1) - (barPad*2)
			int barWidthPX = (barWidth / 100.0) * xSpacing
			
			int centreX = xyZ[0] + (((xyZ1[0] - xyZ[0])+1) / 2)
			
			int barOffset = (centreX - (barWidthPX / 2)) - xyZ[0]
			
			for (Sample s = categories[i].samples.getFirst(); s != null; s = categories[i].samples.getNext())
				{
				//add it to the bar, by going on to the top or below the bottom, depending on whether it's positive or negative...
				
				dec mean = stcore.mean(s.values)
				
				if (mean > 0.0)
					{
					dec topY = barTop + mean
					
					int xyTop[] = getPlotPoint(thisX, topY)
					int xyBot[] = getPlotPoint(thisX+1.0, barTop)
					
					c.rect(new Rect2D(xyTop[0] + barOffset + barPad, xyTop[1], barWidthPX, xyBot[1] - xyTop[1], s.series.seriesColor))
					
					barTop = topY
					}
					else
					{
					dec botY = barLow - mean
					
					int xyTop[] = getPlotPoint(thisX, barLow)
					int xyBot[] = getPlotPoint(thisX+1.0, botY)
					
					c.rect(new Rect2D(xyTop[0] + barOffset + barPad, xyTop[1], barWidthPX, xyBot[1] - xyTop[1], s.series.seriesColor))
					
					barLow = botY
					}
				}
			
			//category label
			
			int textWidth = axisFont.getTextWidth(categories[i].category)
			c.text(new Point2D(centreX - (textWidth/2), xyZ[1] + MARKER_LENGTH, axisColor), axisFont, categories[i].category)
			
			thisX += 1.0
			}
		
		//axes and labels
		drawAxes(c)
		
		//legend
		if (showLegend) drawLegend(c)
		
		c.popSurface()
		}
	
	}
