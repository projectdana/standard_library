/*
This is a REST API for the PAL service. You can visit localhost:HOST_POST/meta/ to view a list of available REST API commands for this service.
*/

uses pal.Perception

const int HOST_POST = 8008

component provides App requires io.Output out, data.IntUtil iu, data.DecUtil du, pal.Assembly, time.Timer timer, composition.RecursiveLoader loader, data.StringUtil stringUtil, net.TCPServerSocket, net.TCPSocket, data.json.JSONParser parser, composition.Search search, data.StringBuilder, io.FileSystem fs {
	
	bool running = true
	char currentConfig[]
	String configs[]
	char systemPath[]
	
	Assembly assembly
	Perception perc
	
	String[] readHeaders(TCPSocket socket)
		{
		String headers[]
		
		char buf[]
		char last4[] = new char[4]
		
		while (last4 != "\r\n\r\n")
			{
			char b[] = socket.recv(1)
			if (b.arrayLength == 0) break
			buf = new char[](buf, b)
			last4[0] = last4[1]
			last4[1] = last4[2]
			last4[2] = last4[3]
			last4[3] = b[0]
			}
		
		headers = stringUtil.explode(buf, "\r\n")
		
		return headers
		}
	
	char[] getHeaderValue(String headers[], char field[])
		{
		for (int i = 0; i < headers.arrayLength; i++)
			{
			String tokens[] = stringUtil.explode(headers[i].string, ":")
			
			if (tokens.arrayLength >= 1 && stringUtil.lowercase(tokens[0].string) == field)
				{
				int ndx = stringUtil.find(headers[i].string, ":") + 1
				return stringUtil.trim(stringUtil.subString(headers[i].string, ndx, headers[i].string.arrayLength - ndx))
				}
			}
		
		return null
		}
	
	void sendOK(TCPSocket socket, char contentType[], char content[])
		{
		int len = content.arrayLength
		
		socket.send("HTTP/1.0 200 OK\r\n")
		socket.send("Server: PAL\r\n")
		socket.send("Content-length: $len\r\n")
		socket.send("Content-type: $contentType\r\n")
		socket.send("Connection: close\r\n")
		socket.send("\r\n")
		
		socket.send(content)
		}
	
	void sendError(TCPSocket socket, char contentType[], char content[])
		{
		int len = content.arrayLength
		
		socket.send("HTTP/1.0 500 Internal server error\r\n")
		socket.send("Server: PAL\r\n")
		socket.send("Content-length: $len\r\n")
		socket.send("Content-type: $contentType\r\n")
		socket.send("Connection: close\r\n")
		socket.send("\r\n")
		
		socket.send(content)
		}
	
	char[] dateToString(DateTime dt)
		{
		char year[] = iu.intToString(dt.year)
		while (year.arrayLength < 4) year = new char[]("0", year)
		char month[] = iu.makeString(dt.month)
		if (month.arrayLength < 2) month = new char[]("0", month)
		char day[] = iu.makeString(dt.day)
		if (day.arrayLength < 2) day = new char[]("0", day)
		
		char hour[] = iu.makeString(dt.hour)
		if (hour.arrayLength < 2) hour = new char[]("0", hour)
		char minute[] = iu.makeString(dt.minute)
		if (minute.arrayLength < 2) minute = new char[]("0", minute)
		char second[] = iu.makeString(dt.second)
		if (second.arrayLength < 2) second = new char[]("0", second)
		
		return "$year-$month-$day $hour:$minute:$second"
		}
	
	char[] perceptionToJSON(PerceptionData pd)
		{
		char content[] = new char[](content, "{")
		
		if (pd != null)
			{
			content = new char[](content, "\"metrics\" : [ ")
			for (int i = 0; i < pd.metrics.arrayLength; i++)
				{
				char preferHigh[] = "false"
				
				if (pd.metrics[i].preferHigh) preferHigh = "true"
				
				content = new char[](content, "{\"name\" : \"$(pd.metrics[i].name)\", \"source\" : \"$(pd.metrics[i].sourceComponent)\", \"value\" : $(iu.intToString(pd.metrics[i].totalValue)), \"count\" : $(iu.makeString(pd.metrics[i].totalCount)), \"preferHigh\" : $preferHigh, \"startTime\" : \"$(dateToString(pd.metrics[i].timeFirst))\", \"endTime\" : \"$(dateToString(pd.metrics[i].timeLast))\"}")
				if (i + 1 < pd.metrics.arrayLength) content = new char[](content, ",")
				}
			content = new char[](content, "], ")
			
			content = new char[](content, "\"events\" : [")
			for (int i = 0; i < pd.events.arrayLength; i++)
				{
				content = new char[](content, "{\"name\" : \"$(pd.events[i].name)\", \"source\" : \"$(pd.events[i].sourceComponent)\", \"value\" : $(iu.intToString(pd.events[i].totalValue)), \"count\" : $(iu.makeString(pd.events[i].totalCount)), \"startTime\" : \"$(dateToString(pd.events[i].timeFirst))\", \"endTime\" : \"$(dateToString(pd.events[i].timeLast))\"}")
				if (i + 1 < pd.events.arrayLength) content = new char[](content, ",")
				}
			content = new char[](content, "], ")
			
			content = new char[](content, "\"trace\" : [")
			for (int i = 0; i < pd.trace.arrayLength; i++)
				{
				content = new char[](content, "{\"content\" : \"$(pd.trace[i].content)\"}")
				if (i + 1 < pd.trace.arrayLength) content = new char[](content, ",")
				}
			content = new char[](content, "]")
			}
		
		content = new char[](content, "}")
		
		return content
		}
	
	void handleRequest(TCPSocket socket)
		{
		String headers[] = readHeaders(socket)
		
		String tokens[] = stringUtil.explode(headers[0].string, " ")
		
		char cmd[] = tokens[0].string
		char rsc[] = tokens[1].string
		
		if (cmd == "GET")
			{
			if (rsc == "/meta/get_all_configs")
				{
				//construct JSON object of all available configurations
				StringBuilder sb = new StringBuilder()
				
				char content[]
				
				sb.add("{")
				sb.add("\"configs\" : [")
				
				for (int i = 0; i < configs.arrayLength; i++)
					{
					sb.add("\"$(configs[i].string)\"")
					
					if (i + 1 < configs.arrayLength) sb.add(", ")
					}
				sb.add("]")
				sb.add("}")
				
				//send response
				sendOK(socket, "text/json", sb.get())
				}
				else if (rsc == "/meta/get_config")
				{
				//return currently in-use configuration
				sendOK(socket, "text/json", new char[]("{\"config\" : \"", currentConfig, "\"}"))
				}
				else if (rsc == "/meta/get_perception")
				{
				//construct JSON object of perception data
				PerceptionData pd = perc.getPerception()
				
				char content[] = perceptionToJSON(pd)
				
				//send response
				sendOK(socket, "text/json", content)
				}
				else if (rsc == "/meta/get_system_path")
				{
				//send response
				sendOK(socket, "text", systemPath)
				}
				else if (rsc == "/meta/get_intercepts")
				{
				//construct JSON object of all available configurations
				InterceptInfo iclist[] = assembly.getIntercepts()
				
				StringBuilder sb = new StringBuilder()
				
				char content[]
				
				sb.add("{")
				sb.add("\"intercepts\" : [")
				
				for (int i = 0; i < iclist.arrayLength; i++)
					{
					sb.add("{\"rule\" : \"$(iclist[i].rule)\", \"impl\" : \"$(iclist[i].impl)\"}")
					
					if (i + 1 < iclist.arrayLength) sb.add(", ")
					}
				sb.add("]")
				sb.add("}")
				
				//send response
				sendOK(socket, "text/json", sb.get())
				}
				else if (rsc == "/meta/")
				{
				char divStyle[] = "margin-top:10pt;font-family: monospace;"
				char content[] = new char[]("<html>",
											"<body>",
											"<div>",
											"This is a REST API for the PAL service. The following commands are available:",
											"</div>",
											"<div style=\"$divStyle\">",
											"GET /meta/get_all_configs HTTP/1.0",
											"</div>",
											"<div style=\"$divStyle\">",
											"GET /meta/get_config HTTP/1.0",
											"</div>",
											"<div style=\"$divStyle\">",
											"GET /meta/get_perception HTTP/1.0",
											"</div>",
											"<div style=\"$divStyle\">",
											"POST /meta/set_config HTTP/1.0<br/>",
											"Content-Type: text<br/>",
											"</div>",
											"<div style=\"$divStyle\">",
											"POST /meta/add_component HTTP/1.0<br/>",
											"Content-Type: text<br/>",
											"</div>",
											"<div style=\"$divStyle\">",
											"POST /meta/rem_component HTTP/1.0<br/>",
											"Content-Type: text<br/>",
											"</div>",
											"<div style=\"$divStyle\">",
											"POST /meta/upd_component HTTP/1.0<br/>",
											"Content-Type: text<br/>",
											"</div>",
											"<div style=\"$divStyle\">",
											"POST /meta/upd_arch HTTP/1.0<br/>",
											"Content-Type: text/json<br/>",
											"</div>",
											"</body>",
											"</html>")
				
				//send response
				sendOK(socket, "text/html", content)
				}
				else
				{
				sendError(socket, "text", "Operation not known")
				}
			}
			else if (cmd == "POST")
			{
			if (rsc == "/meta/set_config")
				{
				char contentType[] = getHeaderValue(headers, "content-type")
				char payloadSize[] = getHeaderValue(headers, "content-length")
				
				if (contentType == "text/json" || contentType == "application/json")
					{
					char config[] = socket.recv(iu.intFromString(payloadSize))
					
					//parse the JSON data
					JSONElement doc = parser.parseDocument(config)
					config = parser.getValue(doc, "config").value
					
					if (assembly.setConfig(config))
						{
						currentConfig = config
						
						//flush perception data
						perc.getPerception()
						
						//respond with HTTP OK
						sendOK(socket, "text/html", null)
						}
						else
						{
						sendError(socket, "text", "Requested configuration '$config' is not known (you must use one of the configurations returned by get_configs)")
						}
					}
					else
					{
					sendError(socket, "text", "Content type must be text/json")
					}
				}
				else if (rsc == "/meta/add_component")
				{
				char contentType[] = getHeaderValue(headers, "content-type")
				char payloadSize[] = getHeaderValue(headers, "content-length")
				
				if (contentType == "text")
					{
					char comp[] = socket.recv(iu.intFromString(payloadSize))
					
					if (assembly.addComponent(comp))
						{
						//respond with HTTP OK
						sendOK(socket, "text/html", null)
						
						configs = assembly.getConfigs()
						currentConfig = configs[0].string
						}
						else
						{
						sendError(socket, "text", "Addition of component failed (check component exists in the system's default search paths)")
						}
					}
					else
					{
					sendError(socket, "text", "Content type must be text")
					}
				}
				else if (rsc == "/meta/rem_component")
				{
				char contentType[] = getHeaderValue(headers, "content-type")
				char payloadSize[] = getHeaderValue(headers, "content-length")
				
				if (contentType == "text")
					{
					char comp[] = socket.recv(iu.intFromString(payloadSize))
					
					if (assembly.remComponent(comp))
						{
						//respond with HTTP OK
						sendOK(socket, "text/html", null)
						
						configs = assembly.getConfigs()
						currentConfig = configs[0].string
						}
						else
						{
						sendError(socket, "text", "Removal of component failed (check component exists in the system, and the system is not currently using the selected component)")
						}
					}
					else
					{
					sendError(socket, "text", "Content type must be text")
					}
				}
				else if (rsc == "/meta/upd_component")
				{
				char contentType[] = getHeaderValue(headers, "content-type")
				char payloadSize[] = getHeaderValue(headers, "content-length")
				
				if (contentType == "text")
					{
					char comp[] = socket.recv(iu.intFromString(payloadSize))
					
					char res[] = null
					if ((res = assembly.updComponent(comp)) != null)
						{
						//respond with HTTP OK
						sendOK(socket, "text", res)
						
						configs = assembly.getConfigs()
						currentConfig = configs[0].string
						}
						else
						{
						sendError(socket, "text", "Update of component failed (check component exists in the system's default search paths)")
						}
					}
					else
					{
					sendError(socket, "text", "Content type must be text")
					}
				}
				else if (rsc == "/meta/upd_arch")
				{
				char contentType[] = getHeaderValue(headers, "content-type")
				char payloadSize[] = getHeaderValue(headers, "content-length")
				
				if (contentType == "text/json")
					{
					char intfs[] = socket.recv(iu.intFromString(payloadSize))
					
					//parse the JSON array
					JSONElement doc = parser.parseDocument(intfs)
					
					if (doc.type == JSONElement.TYPE_ARRAY)
						{
						String ifGroup[] = new String[doc.children.arrayLength]
						
						for (int i = 0; i < doc.children.arrayLength; i++)
							{
							ifGroup[i] = new String(doc.children[i].value)
							}
						
						char res[] = null
						if ((res = assembly.updArch(ifGroup)) != null)
							{
							//respond with HTTP OK
							sendOK(socket, "text", res)
							
							configs = assembly.getConfigs()
							currentConfig = configs[0].string
							}
							else
							{
							sendError(socket, "text", "Update of architecture failed (check all components exist in the system's default search paths)")
							}
						}
						else
						{
						sendError(socket, "text", "Content type must be an array of strings")
						}
					}
					else
					{
					sendError(socket, "text", "Content type must be text/json")
					}
				}
				else if (rsc == "/meta/add_intercept")
				{
				char contentType[] = getHeaderValue(headers, "content-type")
				char payloadSize[] = getHeaderValue(headers, "content-length")
				
				if (contentType == "text/json" || contentType == "application/json")
					{
					char config[] = socket.recv(iu.intFromString(payloadSize))
					
					//parse the JSON data
					JSONElement doc = parser.parseDocument(config)
					char intf[] = parser.getValue(doc, "interface").value
					char cmp[] = parser.getValue(doc, "interceptComponent").value
					
					if (assembly.addIntercept(intf, cmp))
						{
						//respond with HTTP OK
						sendOK(socket, "text/html", null)
						}
						else
						{
						sendError(socket, "text", "Add intercept failed")
						}
					}
					else
					{
					sendError(socket, "text", "Content type must be text/json")
					}
				}
				else if (rsc == "/meta/rem_intercept")
				{
				char contentType[] = getHeaderValue(headers, "content-type")
				char payloadSize[] = getHeaderValue(headers, "content-length")
				
				if (contentType == "text/json" || contentType == "application/json")
					{
					char config[] = socket.recv(iu.intFromString(payloadSize))
					
					//parse the JSON data
					JSONElement doc = parser.parseDocument(config)
					char intf[] = parser.getValue(doc, "interface").value
					char cmp[] = parser.getValue(doc, "interceptComponent").value
					
					if (assembly.remIntercept(intf, cmp))
						{
						//respond with HTTP OK
						sendOK(socket, "text/html", null)
						}
						else
						{
						sendError(socket, "text", "Add intercept failed")
						}
					}
					else
					{
					sendError(socket, "text", "Content type must be text/json")
					}
				}
				else
				{
				sendError(socket, "text", "Operation not known")
				}
			}
			else
			{
			sendError(socket, "text", "Operation type not supported")
			}
		
		socket.disconnect()
		}
	
	void serverThread(int port)
		{
		TCPServerSocket server = new TCPServerSocket()
		
		if (server.bind(TCPServerSocket.ANY_ADDRESS, port))
			{
			out.println("[REST service started, visit http://localhost:$port/meta/ for API details]")
			
			while (running)
				{
				TCPSocket s = new TCPSocket()
				
				if (s.accept(server))
					handleRequest(s)
				}
			}
			else
			{
			out.println("Failed to bind to server port")
			}
		}
	
	int App:main(AppParam params[])
		{
		if (params.arrayLength == 0)
			{
			out.println("usage: pal.rest main_component.o")
			out.println("")
			out.println("Any parameters after main_component.o are passed to the sub-program")
			out.println("")
			out.println("options for pal.rest:")
			out.println(" -p portNumber     Set the port number on which the REST service will listen")
			return 0
			}
		
		char objectFile[] = null
		
		int serverPort = HOST_POST
		
		store AppParam subParams[] = null
		
		for (int i = 0; i < params.arrayLength; i++)
			{
			if (params[i].string == "-p")
				{
				if (i + 1 < params.arrayLength)
					{
					if (stringUtil.isNumeric(params[i+1].string))
						{
						serverPort = iu.intFromString(params[i+1].string)
						i ++
						}
						else
						{
						out.println("expected port number after -p")
						}
					}
					else
					{
					out.println("expected port number after -p")
					return 0
					}
				}
				else if (objectFile == null)
				{
				objectFile = params[i].string
				}
				else if (objectFile != null)
				{
				subParams = new AppParam[](subParams, new AppParam(params[i].string))
				}
			}
		
		objectFile = objectFile.explode("\\").implode("/")
		
		if (!fs.exists(objectFile))
			{
			out.println("object file $objectFile not found")
			return 1
			}
		
		int pathMod = 0
		if (objectFile.startsWith("./")) pathMod = 2
		systemPath = fs.getFullPath(objectFile)
		systemPath = systemPath.subString(0, systemPath.arrayLength - (objectFile.arrayLength-pathMod))
		
		out.println("[system home path: $systemPath]")
		
		char perceptionPath[] = search.getDefaultComponent("pal.Perception")
		LoadedComponents lc = loader.load(perceptionPath)
		IDC perception = lc.mainComponent
		
		out.println("[scanning system for components, please be patient...]")
		
		perc = new Perception() from perception
		assembly = new Assembly(objectFile, subParams, perception)
		
		configs = assembly.getConfigs()
		
		out.println("[located $(iu.intToString(configs.arrayLength)) possible configurations for target software system]")
		
		assembly.setConfig(configs[0].string)
		currentConfig = configs[0].string
		
		//call assembly.runApp(), and launch the server stuff in a different thread...
		asynch::serverThread(serverPort)
		
		assembly.runApp(systemPath)
		
		return 0
		}
	
	}
